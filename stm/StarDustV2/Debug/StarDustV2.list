
StarDustV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031a4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003374  08003374  00004374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003458  08003458  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003458  08003458  00004458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003460  08003460  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003460  08003460  00004460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003464  08003464  00004464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003468  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004084  20000010  08003478  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004094  08003478  00005094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcd7  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002428  00000000  00000000  00010d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00013140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000096f  00000000  00000000  00013da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002113c  00000000  00000000  0001470f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff74  00000000  00000000  0003584b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0977  00000000  00000000  000457bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00116136  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000318c  00000000  00000000  0011617c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00119308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800335c 	.word	0x0800335c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800335c 	.word	0x0800335c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	4a07      	ldr	r2, [pc, #28]	@ (8000568 <vApplicationGetIdleTaskMemory+0x2c>)
 800054c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	4a06      	ldr	r2, [pc, #24]	@ (800056c <vApplicationGetIdleTaskMemory+0x30>)
 8000552:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2280      	movs	r2, #128	@ 0x80
 8000558:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20000040 	.word	0x20000040
 800056c:	20000094 	.word	0x20000094

08000570 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000570:	b5b0      	push	{r4, r5, r7, lr}
 8000572:	b0a4      	sub	sp, #144	@ 0x90
 8000574:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000576:	4b30      	ldr	r3, [pc, #192]	@ (8000638 <MX_FREERTOS_Init+0xc8>)
 8000578:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 800057c:	461d      	mov	r5, r3
 800057e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000582:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800058a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f001 fc56 	bl	8001e42 <osThreadCreate>
 8000596:	4603      	mov	r3, r0
 8000598:	4a28      	ldr	r2, [pc, #160]	@ (800063c <MX_FREERTOS_Init+0xcc>)
 800059a:	6013      	str	r3, [r2, #0]

  /* definition and creation of StateKontrol */
  osThreadDef(StateKontrol, StateKontrolf, osPriorityIdle, 0, 128);
 800059c:	4b28      	ldr	r3, [pc, #160]	@ (8000640 <MX_FREERTOS_Init+0xd0>)
 800059e:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80005a2:	461d      	mov	r5, r3
 80005a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StateKontrolHandle = osThreadCreate(osThread(StateKontrol), NULL);
 80005b0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 fc43 	bl	8001e42 <osThreadCreate>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a21      	ldr	r2, [pc, #132]	@ (8000644 <MX_FREERTOS_Init+0xd4>)
 80005c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of veri */
  osThreadDef(veri, veriF, osPriorityIdle, 0, 128);
 80005c2:	4b21      	ldr	r3, [pc, #132]	@ (8000648 <MX_FREERTOS_Init+0xd8>)
 80005c4:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80005c8:	461d      	mov	r5, r3
 80005ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  veriHandle = osThreadCreate(osThread(veri), NULL);
 80005d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 fc30 	bl	8001e42 <osThreadCreate>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a19      	ldr	r2, [pc, #100]	@ (800064c <MX_FREERTOS_Init+0xdc>)
 80005e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of hataD */
  osThreadDef(hataD, hataDF, osPriorityIdle, 0, 128);
 80005e8:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <MX_FREERTOS_Init+0xe0>)
 80005ea:	f107 0420 	add.w	r4, r7, #32
 80005ee:	461d      	mov	r5, r3
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hataDHandle = osThreadCreate(osThread(hataD), NULL);
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f001 fc1d 	bl	8001e42 <osThreadCreate>
 8000608:	4603      	mov	r3, r0
 800060a:	4a12      	ldr	r2, [pc, #72]	@ (8000654 <MX_FREERTOS_Init+0xe4>)
 800060c:	6013      	str	r3, [r2, #0]

  /* definition and creation of flasMemo */
  osThreadDef(flasMemo, flasMemoF, osPriorityIdle, 0, 128);
 800060e:	4b12      	ldr	r3, [pc, #72]	@ (8000658 <MX_FREERTOS_Init+0xe8>)
 8000610:	1d3c      	adds	r4, r7, #4
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  flasMemoHandle = osThreadCreate(osThread(flasMemo), NULL);
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f001 fc0c 	bl	8001e42 <osThreadCreate>
 800062a:	4603      	mov	r3, r0
 800062c:	4a0b      	ldr	r2, [pc, #44]	@ (800065c <MX_FREERTOS_Init+0xec>)
 800062e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000630:	bf00      	nop
 8000632:	3790      	adds	r7, #144	@ 0x90
 8000634:	46bd      	mov	sp, r7
 8000636:	bdb0      	pop	{r4, r5, r7, pc}
 8000638:	08003380 	.word	0x08003380
 800063c:	2000002c 	.word	0x2000002c
 8000640:	080033ac 	.word	0x080033ac
 8000644:	20000030 	.word	0x20000030
 8000648:	080033d0 	.word	0x080033d0
 800064c:	20000034 	.word	0x20000034
 8000650:	080033f4 	.word	0x080033f4
 8000654:	20000038 	.word	0x20000038
 8000658:	0800341c 	.word	0x0800341c
 800065c:	2000003c 	.word	0x2000003c

08000660 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000668:	2001      	movs	r0, #1
 800066a:	f001 fc36 	bl	8001eda <osDelay>
 800066e:	e7fb      	b.n	8000668 <StartDefaultTask+0x8>

08000670 <StateKontrolf>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StateKontrolf */
void StateKontrolf(void const * argument)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    struct durum;


    osDelay(1);
 8000678:	2001      	movs	r0, #1
 800067a:	f001 fc2e 	bl	8001eda <osDelay>
  {
 800067e:	bf00      	nop
 8000680:	e7fa      	b.n	8000678 <StateKontrolf+0x8>

08000682 <veriF>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_veriF */
void veriF(void const * argument)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN veriF */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800068a:	2001      	movs	r0, #1
 800068c:	f001 fc25 	bl	8001eda <osDelay>
 8000690:	e7fb      	b.n	800068a <veriF+0x8>

08000692 <hataDF>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_hataDF */
void hataDF(void const * argument)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN hataDF */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800069a:	2001      	movs	r0, #1
 800069c:	f001 fc1d 	bl	8001eda <osDelay>
 80006a0:	e7fb      	b.n	800069a <hataDF+0x8>

080006a2 <flasMemoF>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_flasMemoF */
void flasMemoF(void const * argument)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b082      	sub	sp, #8
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN flasMemoF */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f001 fc15 	bl	8001eda <osDelay>
 80006b0:	e7fb      	b.n	80006aa <flasMemoF+0x8>
	...

080006b4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <MX_GPIO_Init+0x4c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000700 <MX_GPIO_Init+0x4c>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <MX_GPIO_Init+0x4c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <MX_GPIO_Init+0x4c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a08      	ldr	r2, [pc, #32]	@ (8000700 <MX_GPIO_Init+0x4c>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <MX_GPIO_Init+0x4c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]

}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800

08000704 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <MX_I2C2_Init+0x50>)
 800070a:	4a13      	ldr	r2, [pc, #76]	@ (8000758 <MX_I2C2_Init+0x54>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_I2C2_Init+0x50>)
 8000710:	4a12      	ldr	r2, [pc, #72]	@ (800075c <MX_I2C2_Init+0x58>)
 8000712:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_I2C2_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_I2C2_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_I2C2_Init+0x50>)
 8000722:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000726:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000728:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <MX_I2C2_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_I2C2_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <MX_I2C2_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_I2C2_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	@ (8000754 <MX_I2C2_Init+0x50>)
 8000742:	f000 fccd 	bl	80010e0 <HAL_I2C_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800074c:	f000 f946 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000294 	.word	0x20000294
 8000758:	40005800 	.word	0x40005800
 800075c:	000186a0 	.word	0x000186a0

08000760 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_I2C3_Init+0x50>)
 8000766:	4a13      	ldr	r2, [pc, #76]	@ (80007b4 <MX_I2C3_Init+0x54>)
 8000768:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_I2C3_Init+0x50>)
 800076c:	4a12      	ldr	r2, [pc, #72]	@ (80007b8 <MX_I2C3_Init+0x58>)
 800076e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_I2C3_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_I2C3_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_I2C3_Init+0x50>)
 800077e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000782:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <MX_I2C3_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_I2C3_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <MX_I2C3_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_I2C3_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <MX_I2C3_Init+0x50>)
 800079e:	f000 fc9f 	bl	80010e0 <HAL_I2C_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007a8:	f000 f918 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200002e8 	.word	0x200002e8
 80007b4:	40005c00 	.word	0x40005c00
 80007b8:	000186a0 	.word	0x000186a0

080007bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	@ 0x30
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a42      	ldr	r2, [pc, #264]	@ (80008e4 <HAL_I2C_MspInit+0x128>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d12d      	bne.n	800083a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
 80007e2:	4b41      	ldr	r3, [pc, #260]	@ (80008e8 <HAL_I2C_MspInit+0x12c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a40      	ldr	r2, [pc, #256]	@ (80008e8 <HAL_I2C_MspInit+0x12c>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b3e      	ldr	r3, [pc, #248]	@ (80008e8 <HAL_I2C_MspInit+0x12c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	61bb      	str	r3, [r7, #24]
 80007f8:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BHI_I2C_SCL_Pin|BHI_I2C_SDA_Pin;
 80007fa:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 80007fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000800:	2312      	movs	r3, #18
 8000802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800080c:	2304      	movs	r3, #4
 800080e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4835      	ldr	r0, [pc, #212]	@ (80008ec <HAL_I2C_MspInit+0x130>)
 8000818:	f000 face 	bl	8000db8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	4b31      	ldr	r3, [pc, #196]	@ (80008e8 <HAL_I2C_MspInit+0x12c>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000824:	4a30      	ldr	r2, [pc, #192]	@ (80008e8 <HAL_I2C_MspInit+0x12c>)
 8000826:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800082a:	6413      	str	r3, [r2, #64]	@ 0x40
 800082c:	4b2e      	ldr	r3, [pc, #184]	@ (80008e8 <HAL_I2C_MspInit+0x12c>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000830:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000838:	e04f      	b.n	80008da <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a2c      	ldr	r2, [pc, #176]	@ (80008f0 <HAL_I2C_MspInit+0x134>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d14a      	bne.n	80008da <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	4b27      	ldr	r3, [pc, #156]	@ (80008e8 <HAL_I2C_MspInit+0x12c>)
 800084a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084c:	4a26      	ldr	r2, [pc, #152]	@ (80008e8 <HAL_I2C_MspInit+0x12c>)
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	6313      	str	r3, [r2, #48]	@ 0x30
 8000854:	4b24      	ldr	r3, [pc, #144]	@ (80008e8 <HAL_I2C_MspInit+0x12c>)
 8000856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <HAL_I2C_MspInit+0x12c>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000868:	4a1f      	ldr	r2, [pc, #124]	@ (80008e8 <HAL_I2C_MspInit+0x12c>)
 800086a:	f043 0302 	orr.w	r3, r3, #2
 800086e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000870:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <HAL_I2C_MspInit+0x12c>)
 8000872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000874:	f003 0302 	and.w	r3, r3, #2
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BMP_I2C_SCL_Pin;
 800087c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000882:	2312      	movs	r3, #18
 8000884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800088e:	2304      	movs	r3, #4
 8000890:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BMP_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4816      	ldr	r0, [pc, #88]	@ (80008f4 <HAL_I2C_MspInit+0x138>)
 800089a:	f000 fa8d 	bl	8000db8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BMP_I2C_SDA_Pin;
 800089e:	2310      	movs	r3, #16
 80008a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a2:	2312      	movs	r3, #18
 80008a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80008ae:	2304      	movs	r3, #4
 80008b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BMP_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	480c      	ldr	r0, [pc, #48]	@ (80008ec <HAL_I2C_MspInit+0x130>)
 80008ba:	f000 fa7d 	bl	8000db8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <HAL_I2C_MspInit+0x12c>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	4a08      	ldr	r2, [pc, #32]	@ (80008e8 <HAL_I2C_MspInit+0x12c>)
 80008c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80008cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <HAL_I2C_MspInit+0x12c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
}
 80008da:	bf00      	nop
 80008dc:	3730      	adds	r7, #48	@ 0x30
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40005800 	.word	0x40005800
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020400 	.word	0x40020400
 80008f0:	40005c00 	.word	0x40005c00
 80008f4:	40020000 	.word	0x40020000

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fc:	f000 f904 	bl	8000b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000900:	f000 f80c 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000904:	f7ff fed6 	bl	80006b4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000908:	f7ff fefc 	bl	8000704 <MX_I2C2_Init>
  MX_I2C3_Init();
 800090c:	f7ff ff28 	bl	8000760 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000910:	f7ff fe2e 	bl	8000570 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000914:	f001 fa8e 	bl	8001e34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <main+0x20>

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b094      	sub	sp, #80	@ 0x50
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	2234      	movs	r2, #52	@ 0x34
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f002 fcea 	bl	8003304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	4b23      	ldr	r3, [pc, #140]	@ (80009d4 <SystemClock_Config+0xb8>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000948:	4a22      	ldr	r2, [pc, #136]	@ (80009d4 <SystemClock_Config+0xb8>)
 800094a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000950:	4b20      	ldr	r3, [pc, #128]	@ (80009d4 <SystemClock_Config+0xb8>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800095c:	2300      	movs	r3, #0
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	4b1d      	ldr	r3, [pc, #116]	@ (80009d8 <SystemClock_Config+0xbc>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000968:	4a1b      	ldr	r2, [pc, #108]	@ (80009d8 <SystemClock_Config+0xbc>)
 800096a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800096e:	6013      	str	r3, [r2, #0]
 8000970:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <SystemClock_Config+0xbc>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800097c:	2302      	movs	r3, #2
 800097e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000980:	2301      	movs	r3, #1
 8000982:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000984:	2310      	movs	r3, #16
 8000986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000988:	2300      	movs	r3, #0
 800098a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4618      	mov	r0, r3
 8000992:	f000 ff99 	bl	80018c8 <HAL_RCC_OscConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800099c:	f000 f81e 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a0:	230f      	movs	r3, #15
 80009a2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 fcd4 	bl	8001368 <HAL_RCC_ClockConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009c6:	f000 f809 	bl	80009dc <Error_Handler>
  }
}
 80009ca:	bf00      	nop
 80009cc:	3750      	adds	r7, #80	@ 0x50
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40007000 	.word	0x40007000

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <Error_Handler+0x8>

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <HAL_MspInit+0x54>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f6:	4a11      	ldr	r2, [pc, #68]	@ (8000a3c <HAL_MspInit+0x54>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009fe:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <HAL_MspInit+0x54>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a3c <HAL_MspInit+0x54>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a0a      	ldr	r2, [pc, #40]	@ (8000a3c <HAL_MspInit+0x54>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <HAL_MspInit+0x54>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	210f      	movs	r1, #15
 8000a2a:	f06f 0001 	mvn.w	r0, #1
 8000a2e:	f000 f99a 	bl	8000d66 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <NMI_Handler+0x4>

08000a48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <MemManage_Handler+0x4>

08000a58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7a:	f000 f897 	bl	8000bac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a7e:	f001 ffbb 	bl	80029f8 <xTaskGetSchedulerState>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d001      	beq.n	8000a8c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a88:	f002 f9fe 	bl	8002e88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <SystemInit+0x20>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a9a:	4a05      	ldr	r2, [pc, #20]	@ (8000ab0 <SystemInit+0x20>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ab4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ab8:	f7ff ffea 	bl	8000a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000abc:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000abe:	490d      	ldr	r1, [pc, #52]	@ (8000af4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8000af8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ae2:	f002 fc17 	bl	8003314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae6:	f7ff ff07 	bl	80008f8 <main>
  bx  lr    
 8000aea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000af8:	08003468 	.word	0x08003468
  ldr r2, =_sbss
 8000afc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b00:	20004094 	.word	0x20004094

08000b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC_IRQHandler>
	...

08000b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <HAL_Init+0x40>)
 8000b12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b18:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <HAL_Init+0x40>)
 8000b1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b24:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <HAL_Init+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a07      	ldr	r2, [pc, #28]	@ (8000b48 <HAL_Init+0x40>)
 8000b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 f90d 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b36:	200f      	movs	r0, #15
 8000b38:	f000 f808 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b3c:	f7ff ff54 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023c00 	.word	0x40023c00

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b54:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <HAL_InitTick+0x54>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <HAL_InitTick+0x58>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f917 	bl	8000d9e <HAL_SYSTICK_Config>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00e      	b.n	8000b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d80a      	bhi.n	8000b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f000 f8ed 	bl	8000d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b8c:	4a06      	ldr	r2, [pc, #24]	@ (8000ba8 <HAL_InitTick+0x5c>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e000      	b.n	8000b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20000004 	.word	0x20000004

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	2000033c 	.word	0x2000033c

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	2000033c 	.word	0x2000033c

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	@ (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	@ (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	@ 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	@ 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d1c:	d301      	bcc.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00f      	b.n	8000d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <SysTick_Config+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f7ff ff8e 	bl	8000c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <SysTick_Config+0x40>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	@ (8000d4c <SysTick_Config+0x40>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff47 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d78:	f7ff ff5c 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f7ff ff8e 	bl	8000ca4 <NVIC_EncodePriority>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff5d 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d96:	bf00      	nop
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ffb0 	bl	8000d0c <SysTick_Config>
 8000dac:	4603      	mov	r3, r0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	@ 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
 8000dd2:	e165      	b.n	80010a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	f040 8154 	bne.w	800109a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d005      	beq.n	8000e0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d130      	bne.n	8000e6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	2203      	movs	r2, #3
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	68da      	ldr	r2, [r3, #12]
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	091b      	lsrs	r3, r3, #4
 8000e56:	f003 0201 	and.w	r2, r3, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d017      	beq.n	8000ea8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d123      	bne.n	8000efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	08da      	lsrs	r2, r3, #3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3208      	adds	r2, #8
 8000ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	f003 0307 	and.w	r3, r3, #7
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	220f      	movs	r2, #15
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	691a      	ldr	r2, [r3, #16]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	08da      	lsrs	r2, r3, #3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3208      	adds	r2, #8
 8000ef6:	69b9      	ldr	r1, [r7, #24]
 8000ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0203 	and.w	r2, r3, #3
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 80ae 	beq.w	800109a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b5d      	ldr	r3, [pc, #372]	@ (80010b8 <HAL_GPIO_Init+0x300>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f46:	4a5c      	ldr	r2, [pc, #368]	@ (80010b8 <HAL_GPIO_Init+0x300>)
 8000f48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f4e:	4b5a      	ldr	r3, [pc, #360]	@ (80010b8 <HAL_GPIO_Init+0x300>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f5a:	4a58      	ldr	r2, [pc, #352]	@ (80010bc <HAL_GPIO_Init+0x304>)
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	3302      	adds	r3, #2
 8000f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	220f      	movs	r2, #15
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4f      	ldr	r2, [pc, #316]	@ (80010c0 <HAL_GPIO_Init+0x308>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d025      	beq.n	8000fd2 <HAL_GPIO_Init+0x21a>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4e      	ldr	r2, [pc, #312]	@ (80010c4 <HAL_GPIO_Init+0x30c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d01f      	beq.n	8000fce <HAL_GPIO_Init+0x216>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4d      	ldr	r2, [pc, #308]	@ (80010c8 <HAL_GPIO_Init+0x310>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d019      	beq.n	8000fca <HAL_GPIO_Init+0x212>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4c      	ldr	r2, [pc, #304]	@ (80010cc <HAL_GPIO_Init+0x314>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d013      	beq.n	8000fc6 <HAL_GPIO_Init+0x20e>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4b      	ldr	r2, [pc, #300]	@ (80010d0 <HAL_GPIO_Init+0x318>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d00d      	beq.n	8000fc2 <HAL_GPIO_Init+0x20a>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4a      	ldr	r2, [pc, #296]	@ (80010d4 <HAL_GPIO_Init+0x31c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d007      	beq.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a49      	ldr	r2, [pc, #292]	@ (80010d8 <HAL_GPIO_Init+0x320>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d101      	bne.n	8000fba <HAL_GPIO_Init+0x202>
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	e00c      	b.n	8000fd4 <HAL_GPIO_Init+0x21c>
 8000fba:	2307      	movs	r3, #7
 8000fbc:	e00a      	b.n	8000fd4 <HAL_GPIO_Init+0x21c>
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	e008      	b.n	8000fd4 <HAL_GPIO_Init+0x21c>
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	e006      	b.n	8000fd4 <HAL_GPIO_Init+0x21c>
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e004      	b.n	8000fd4 <HAL_GPIO_Init+0x21c>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e002      	b.n	8000fd4 <HAL_GPIO_Init+0x21c>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <HAL_GPIO_Init+0x21c>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	69fa      	ldr	r2, [r7, #28]
 8000fd6:	f002 0203 	and.w	r2, r2, #3
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	4093      	lsls	r3, r2
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fe4:	4935      	ldr	r1, [pc, #212]	@ (80010bc <HAL_GPIO_Init+0x304>)
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	3302      	adds	r3, #2
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff2:	4b3a      	ldr	r3, [pc, #232]	@ (80010dc <HAL_GPIO_Init+0x324>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001016:	4a31      	ldr	r2, [pc, #196]	@ (80010dc <HAL_GPIO_Init+0x324>)
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800101c:	4b2f      	ldr	r3, [pc, #188]	@ (80010dc <HAL_GPIO_Init+0x324>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001040:	4a26      	ldr	r2, [pc, #152]	@ (80010dc <HAL_GPIO_Init+0x324>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001046:	4b25      	ldr	r3, [pc, #148]	@ (80010dc <HAL_GPIO_Init+0x324>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800106a:	4a1c      	ldr	r2, [pc, #112]	@ (80010dc <HAL_GPIO_Init+0x324>)
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001070:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <HAL_GPIO_Init+0x324>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001094:	4a11      	ldr	r2, [pc, #68]	@ (80010dc <HAL_GPIO_Init+0x324>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3301      	adds	r3, #1
 800109e:	61fb      	str	r3, [r7, #28]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	2b0f      	cmp	r3, #15
 80010a4:	f67f ae96 	bls.w	8000dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3724      	adds	r7, #36	@ 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40013800 	.word	0x40013800
 80010c0:	40020000 	.word	0x40020000
 80010c4:	40020400 	.word	0x40020400
 80010c8:	40020800 	.word	0x40020800
 80010cc:	40020c00 	.word	0x40020c00
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40021400 	.word	0x40021400
 80010d8:	40021800 	.word	0x40021800
 80010dc:	40013c00 	.word	0x40013c00

080010e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e12b      	b.n	800134a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d106      	bne.n	800110c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff fb58 	bl	80007bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2224      	movs	r2, #36	@ 0x24
 8001110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0201 	bic.w	r2, r2, #1
 8001122:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001132:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001142:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001144:	f000 fa02 	bl	800154c <HAL_RCC_GetPCLK1Freq>
 8001148:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	4a81      	ldr	r2, [pc, #516]	@ (8001354 <HAL_I2C_Init+0x274>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d807      	bhi.n	8001164 <HAL_I2C_Init+0x84>
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4a80      	ldr	r2, [pc, #512]	@ (8001358 <HAL_I2C_Init+0x278>)
 8001158:	4293      	cmp	r3, r2
 800115a:	bf94      	ite	ls
 800115c:	2301      	movls	r3, #1
 800115e:	2300      	movhi	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	e006      	b.n	8001172 <HAL_I2C_Init+0x92>
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4a7d      	ldr	r2, [pc, #500]	@ (800135c <HAL_I2C_Init+0x27c>)
 8001168:	4293      	cmp	r3, r2
 800116a:	bf94      	ite	ls
 800116c:	2301      	movls	r3, #1
 800116e:	2300      	movhi	r3, #0
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e0e7      	b.n	800134a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4a78      	ldr	r2, [pc, #480]	@ (8001360 <HAL_I2C_Init+0x280>)
 800117e:	fba2 2303 	umull	r2, r3, r2, r3
 8001182:	0c9b      	lsrs	r3, r3, #18
 8001184:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	430a      	orrs	r2, r1
 8001198:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001354 <HAL_I2C_Init+0x274>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d802      	bhi.n	80011b4 <HAL_I2C_Init+0xd4>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	3301      	adds	r3, #1
 80011b2:	e009      	b.n	80011c8 <HAL_I2C_Init+0xe8>
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	4a69      	ldr	r2, [pc, #420]	@ (8001364 <HAL_I2C_Init+0x284>)
 80011c0:	fba2 2303 	umull	r2, r3, r2, r3
 80011c4:	099b      	lsrs	r3, r3, #6
 80011c6:	3301      	adds	r3, #1
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	6812      	ldr	r2, [r2, #0]
 80011cc:	430b      	orrs	r3, r1
 80011ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80011da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	495c      	ldr	r1, [pc, #368]	@ (8001354 <HAL_I2C_Init+0x274>)
 80011e4:	428b      	cmp	r3, r1
 80011e6:	d819      	bhi.n	800121c <HAL_I2C_Init+0x13c>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	1e59      	subs	r1, r3, #1
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80011f6:	1c59      	adds	r1, r3, #1
 80011f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80011fc:	400b      	ands	r3, r1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00a      	beq.n	8001218 <HAL_I2C_Init+0x138>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	1e59      	subs	r1, r3, #1
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001210:	3301      	adds	r3, #1
 8001212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001216:	e051      	b.n	80012bc <HAL_I2C_Init+0x1dc>
 8001218:	2304      	movs	r3, #4
 800121a:	e04f      	b.n	80012bc <HAL_I2C_Init+0x1dc>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d111      	bne.n	8001248 <HAL_I2C_Init+0x168>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	1e58      	subs	r0, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6859      	ldr	r1, [r3, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	440b      	add	r3, r1
 8001232:	fbb0 f3f3 	udiv	r3, r0, r3
 8001236:	3301      	adds	r3, #1
 8001238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800123c:	2b00      	cmp	r3, #0
 800123e:	bf0c      	ite	eq
 8001240:	2301      	moveq	r3, #1
 8001242:	2300      	movne	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	e012      	b.n	800126e <HAL_I2C_Init+0x18e>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	1e58      	subs	r0, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6859      	ldr	r1, [r3, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	0099      	lsls	r1, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	fbb0 f3f3 	udiv	r3, r0, r3
 800125e:	3301      	adds	r3, #1
 8001260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf0c      	ite	eq
 8001268:	2301      	moveq	r3, #1
 800126a:	2300      	movne	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_I2C_Init+0x196>
 8001272:	2301      	movs	r3, #1
 8001274:	e022      	b.n	80012bc <HAL_I2C_Init+0x1dc>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10e      	bne.n	800129c <HAL_I2C_Init+0x1bc>
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1e58      	subs	r0, r3, #1
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6859      	ldr	r1, [r3, #4]
 8001286:	460b      	mov	r3, r1
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	440b      	add	r3, r1
 800128c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001290:	3301      	adds	r3, #1
 8001292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001296:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800129a:	e00f      	b.n	80012bc <HAL_I2C_Init+0x1dc>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	1e58      	subs	r0, r3, #1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6859      	ldr	r1, [r3, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	0099      	lsls	r1, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b2:	3301      	adds	r3, #1
 80012b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	6809      	ldr	r1, [r1, #0]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69da      	ldr	r2, [r3, #28]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80012ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	6911      	ldr	r1, [r2, #16]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68d2      	ldr	r2, [r2, #12]
 80012f6:	4311      	orrs	r1, r2
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	6812      	ldr	r2, [r2, #0]
 80012fc:	430b      	orrs	r3, r1
 80012fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695a      	ldr	r2, [r3, #20]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0201 	orr.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2220      	movs	r2, #32
 8001336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	000186a0 	.word	0x000186a0
 8001358:	001e847f 	.word	0x001e847f
 800135c:	003d08ff 	.word	0x003d08ff
 8001360:	431bde83 	.word	0x431bde83
 8001364:	10624dd3 	.word	0x10624dd3

08001368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e0cc      	b.n	8001516 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800137c:	4b68      	ldr	r3, [pc, #416]	@ (8001520 <HAL_RCC_ClockConfig+0x1b8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 030f 	and.w	r3, r3, #15
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d90c      	bls.n	80013a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138a:	4b65      	ldr	r3, [pc, #404]	@ (8001520 <HAL_RCC_ClockConfig+0x1b8>)
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001392:	4b63      	ldr	r3, [pc, #396]	@ (8001520 <HAL_RCC_ClockConfig+0x1b8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d001      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e0b8      	b.n	8001516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d020      	beq.n	80013f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d005      	beq.n	80013c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013bc:	4b59      	ldr	r3, [pc, #356]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	4a58      	ldr	r2, [pc, #352]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80013c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80013c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0308 	and.w	r3, r3, #8
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d005      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013d4:	4b53      	ldr	r3, [pc, #332]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	4a52      	ldr	r2, [pc, #328]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80013da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013e0:	4b50      	ldr	r3, [pc, #320]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	494d      	ldr	r1, [pc, #308]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d044      	beq.n	8001488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d107      	bne.n	8001416 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	4b47      	ldr	r3, [pc, #284]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d119      	bne.n	8001446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e07f      	b.n	8001516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d003      	beq.n	8001426 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001422:	2b03      	cmp	r3, #3
 8001424:	d107      	bne.n	8001436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001426:	4b3f      	ldr	r3, [pc, #252]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d109      	bne.n	8001446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e06f      	b.n	8001516 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001436:	4b3b      	ldr	r3, [pc, #236]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e067      	b.n	8001516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001446:	4b37      	ldr	r3, [pc, #220]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f023 0203 	bic.w	r2, r3, #3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	4934      	ldr	r1, [pc, #208]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 8001454:	4313      	orrs	r3, r2
 8001456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001458:	f7ff fbbc 	bl	8000bd4 <HAL_GetTick>
 800145c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800145e:	e00a      	b.n	8001476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001460:	f7ff fbb8 	bl	8000bd4 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800146e:	4293      	cmp	r3, r2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e04f      	b.n	8001516 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001476:	4b2b      	ldr	r3, [pc, #172]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 020c 	and.w	r2, r3, #12
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	429a      	cmp	r2, r3
 8001486:	d1eb      	bne.n	8001460 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001488:	4b25      	ldr	r3, [pc, #148]	@ (8001520 <HAL_RCC_ClockConfig+0x1b8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 030f 	and.w	r3, r3, #15
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	429a      	cmp	r2, r3
 8001494:	d20c      	bcs.n	80014b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001496:	4b22      	ldr	r3, [pc, #136]	@ (8001520 <HAL_RCC_ClockConfig+0x1b8>)
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800149e:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <HAL_RCC_ClockConfig+0x1b8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d001      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e032      	b.n	8001516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d008      	beq.n	80014ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014bc:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	4916      	ldr	r1, [pc, #88]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d009      	beq.n	80014ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014da:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	490e      	ldr	r1, [pc, #56]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014ee:	f000 f841 	bl	8001574 <HAL_RCC_GetSysClockFreq>
 80014f2:	4602      	mov	r2, r0
 80014f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	091b      	lsrs	r3, r3, #4
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	490a      	ldr	r1, [pc, #40]	@ (8001528 <HAL_RCC_ClockConfig+0x1c0>)
 8001500:	5ccb      	ldrb	r3, [r1, r3]
 8001502:	fa22 f303 	lsr.w	r3, r2, r3
 8001506:	4a09      	ldr	r2, [pc, #36]	@ (800152c <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800150a:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <HAL_RCC_ClockConfig+0x1c8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fb1c 	bl	8000b4c <HAL_InitTick>

  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023c00 	.word	0x40023c00
 8001524:	40023800 	.word	0x40023800
 8001528:	08003440 	.word	0x08003440
 800152c:	20000000 	.word	0x20000000
 8001530:	20000004 	.word	0x20000004

08001534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001538:	4b03      	ldr	r3, [pc, #12]	@ (8001548 <HAL_RCC_GetHCLKFreq+0x14>)
 800153a:	681b      	ldr	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000000 	.word	0x20000000

0800154c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001550:	f7ff fff0 	bl	8001534 <HAL_RCC_GetHCLKFreq>
 8001554:	4602      	mov	r2, r0
 8001556:	4b05      	ldr	r3, [pc, #20]	@ (800156c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	0a9b      	lsrs	r3, r3, #10
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	4903      	ldr	r1, [pc, #12]	@ (8001570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001562:	5ccb      	ldrb	r3, [r1, r3]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001568:	4618      	mov	r0, r3
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	08003450 	.word	0x08003450

08001574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001578:	b0a6      	sub	sp, #152	@ 0x98
 800157a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001582:	2300      	movs	r3, #0
 8001584:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800159a:	4bc8      	ldr	r3, [pc, #800]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x348>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b0c      	cmp	r3, #12
 80015a4:	f200 817e 	bhi.w	80018a4 <HAL_RCC_GetSysClockFreq+0x330>
 80015a8:	a201      	add	r2, pc, #4	@ (adr r2, 80015b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80015aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	080015e5 	.word	0x080015e5
 80015b4:	080018a5 	.word	0x080018a5
 80015b8:	080018a5 	.word	0x080018a5
 80015bc:	080018a5 	.word	0x080018a5
 80015c0:	080015ed 	.word	0x080015ed
 80015c4:	080018a5 	.word	0x080018a5
 80015c8:	080018a5 	.word	0x080018a5
 80015cc:	080018a5 	.word	0x080018a5
 80015d0:	080015f5 	.word	0x080015f5
 80015d4:	080018a5 	.word	0x080018a5
 80015d8:	080018a5 	.word	0x080018a5
 80015dc:	080018a5 	.word	0x080018a5
 80015e0:	0800175f 	.word	0x0800175f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015e4:	4bb6      	ldr	r3, [pc, #728]	@ (80018c0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80015e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80015ea:	e15f      	b.n	80018ac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015ec:	4bb5      	ldr	r3, [pc, #724]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x350>)
 80015ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80015f2:	e15b      	b.n	80018ac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015f4:	4bb1      	ldr	r3, [pc, #708]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x348>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001600:	4bae      	ldr	r3, [pc, #696]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x348>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d031      	beq.n	8001670 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800160c:	4bab      	ldr	r3, [pc, #684]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x348>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	099b      	lsrs	r3, r3, #6
 8001612:	2200      	movs	r2, #0
 8001614:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001616:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001618:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800161a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800161e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001620:	2300      	movs	r3, #0
 8001622:	667b      	str	r3, [r7, #100]	@ 0x64
 8001624:	4ba7      	ldr	r3, [pc, #668]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001626:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800162a:	462a      	mov	r2, r5
 800162c:	fb03 f202 	mul.w	r2, r3, r2
 8001630:	2300      	movs	r3, #0
 8001632:	4621      	mov	r1, r4
 8001634:	fb01 f303 	mul.w	r3, r1, r3
 8001638:	4413      	add	r3, r2
 800163a:	4aa2      	ldr	r2, [pc, #648]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x350>)
 800163c:	4621      	mov	r1, r4
 800163e:	fba1 1202 	umull	r1, r2, r1, r2
 8001642:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001644:	460a      	mov	r2, r1
 8001646:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001648:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800164a:	4413      	add	r3, r2
 800164c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800164e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001652:	2200      	movs	r2, #0
 8001654:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001656:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001658:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800165c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001660:	f7fe fdd6 	bl	8000210 <__aeabi_uldivmod>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4613      	mov	r3, r2
 800166a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800166e:	e064      	b.n	800173a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001670:	4b92      	ldr	r3, [pc, #584]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x348>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	099b      	lsrs	r3, r3, #6
 8001676:	2200      	movs	r2, #0
 8001678:	653b      	str	r3, [r7, #80]	@ 0x50
 800167a:	657a      	str	r2, [r7, #84]	@ 0x54
 800167c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800167e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001682:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001684:	2300      	movs	r3, #0
 8001686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001688:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800168c:	4622      	mov	r2, r4
 800168e:	462b      	mov	r3, r5
 8001690:	f04f 0000 	mov.w	r0, #0
 8001694:	f04f 0100 	mov.w	r1, #0
 8001698:	0159      	lsls	r1, r3, #5
 800169a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800169e:	0150      	lsls	r0, r2, #5
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4621      	mov	r1, r4
 80016a6:	1a51      	subs	r1, r2, r1
 80016a8:	6139      	str	r1, [r7, #16]
 80016aa:	4629      	mov	r1, r5
 80016ac:	eb63 0301 	sbc.w	r3, r3, r1
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016be:	4659      	mov	r1, fp
 80016c0:	018b      	lsls	r3, r1, #6
 80016c2:	4651      	mov	r1, sl
 80016c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016c8:	4651      	mov	r1, sl
 80016ca:	018a      	lsls	r2, r1, #6
 80016cc:	4651      	mov	r1, sl
 80016ce:	ebb2 0801 	subs.w	r8, r2, r1
 80016d2:	4659      	mov	r1, fp
 80016d4:	eb63 0901 	sbc.w	r9, r3, r1
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016ec:	4690      	mov	r8, r2
 80016ee:	4699      	mov	r9, r3
 80016f0:	4623      	mov	r3, r4
 80016f2:	eb18 0303 	adds.w	r3, r8, r3
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	462b      	mov	r3, r5
 80016fa:	eb49 0303 	adc.w	r3, r9, r3
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800170c:	4629      	mov	r1, r5
 800170e:	028b      	lsls	r3, r1, #10
 8001710:	4621      	mov	r1, r4
 8001712:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001716:	4621      	mov	r1, r4
 8001718:	028a      	lsls	r2, r1, #10
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001722:	2200      	movs	r2, #0
 8001724:	643b      	str	r3, [r7, #64]	@ 0x40
 8001726:	647a      	str	r2, [r7, #68]	@ 0x44
 8001728:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800172c:	f7fe fd70 	bl	8000210 <__aeabi_uldivmod>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4613      	mov	r3, r2
 8001736:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800173a:	4b60      	ldr	r3, [pc, #384]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x348>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	0c1b      	lsrs	r3, r3, #16
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	3301      	adds	r3, #1
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800174c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001750:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001754:	fbb2 f3f3 	udiv	r3, r2, r3
 8001758:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800175c:	e0a6      	b.n	80018ac <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800175e:	4b57      	ldr	r3, [pc, #348]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x348>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001766:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800176a:	4b54      	ldr	r3, [pc, #336]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x348>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d02a      	beq.n	80017cc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001776:	4b51      	ldr	r3, [pc, #324]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x348>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	099b      	lsrs	r3, r3, #6
 800177c:	2200      	movs	r2, #0
 800177e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001780:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001784:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001788:	2100      	movs	r1, #0
 800178a:	4b4e      	ldr	r3, [pc, #312]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x350>)
 800178c:	fb03 f201 	mul.w	r2, r3, r1
 8001790:	2300      	movs	r3, #0
 8001792:	fb00 f303 	mul.w	r3, r0, r3
 8001796:	4413      	add	r3, r2
 8001798:	4a4a      	ldr	r2, [pc, #296]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x350>)
 800179a:	fba0 1202 	umull	r1, r2, r0, r2
 800179e:	677a      	str	r2, [r7, #116]	@ 0x74
 80017a0:	460a      	mov	r2, r1
 80017a2:	673a      	str	r2, [r7, #112]	@ 0x70
 80017a4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80017a6:	4413      	add	r3, r2
 80017a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80017aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017ae:	2200      	movs	r2, #0
 80017b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80017b2:	637a      	str	r2, [r7, #52]	@ 0x34
 80017b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80017b8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80017bc:	f7fe fd28 	bl	8000210 <__aeabi_uldivmod>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4613      	mov	r3, r2
 80017c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80017ca:	e05b      	b.n	8001884 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017cc:	4b3b      	ldr	r3, [pc, #236]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x348>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	099b      	lsrs	r3, r3, #6
 80017d2:	2200      	movs	r2, #0
 80017d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017de:	623b      	str	r3, [r7, #32]
 80017e0:	2300      	movs	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017e8:	4642      	mov	r2, r8
 80017ea:	464b      	mov	r3, r9
 80017ec:	f04f 0000 	mov.w	r0, #0
 80017f0:	f04f 0100 	mov.w	r1, #0
 80017f4:	0159      	lsls	r1, r3, #5
 80017f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017fa:	0150      	lsls	r0, r2, #5
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4641      	mov	r1, r8
 8001802:	ebb2 0a01 	subs.w	sl, r2, r1
 8001806:	4649      	mov	r1, r9
 8001808:	eb63 0b01 	sbc.w	fp, r3, r1
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001818:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800181c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001820:	ebb2 040a 	subs.w	r4, r2, sl
 8001824:	eb63 050b 	sbc.w	r5, r3, fp
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	00eb      	lsls	r3, r5, #3
 8001832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001836:	00e2      	lsls	r2, r4, #3
 8001838:	4614      	mov	r4, r2
 800183a:	461d      	mov	r5, r3
 800183c:	4643      	mov	r3, r8
 800183e:	18e3      	adds	r3, r4, r3
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	464b      	mov	r3, r9
 8001844:	eb45 0303 	adc.w	r3, r5, r3
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001856:	4629      	mov	r1, r5
 8001858:	028b      	lsls	r3, r1, #10
 800185a:	4621      	mov	r1, r4
 800185c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001860:	4621      	mov	r1, r4
 8001862:	028a      	lsls	r2, r1, #10
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800186c:	2200      	movs	r2, #0
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	61fa      	str	r2, [r7, #28]
 8001872:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001876:	f7fe fccb 	bl	8000210 <__aeabi_uldivmod>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4613      	mov	r3, r2
 8001880:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001884:	4b0d      	ldr	r3, [pc, #52]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x348>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	0f1b      	lsrs	r3, r3, #28
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001892:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001896:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80018a2:	e003      	b.n	80018ac <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80018a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80018aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3798      	adds	r7, #152	@ 0x98
 80018b4:	46bd      	mov	sp, r7
 80018b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	00f42400 	.word	0x00f42400
 80018c4:	017d7840 	.word	0x017d7840

080018c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e28d      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 8083 	beq.w	80019ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80018e8:	4b94      	ldr	r3, [pc, #592]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 030c 	and.w	r3, r3, #12
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d019      	beq.n	8001928 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018f4:	4b91      	ldr	r3, [pc, #580]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 030c 	and.w	r3, r3, #12
        || \
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d106      	bne.n	800190e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001900:	4b8e      	ldr	r3, [pc, #568]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001908:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800190c:	d00c      	beq.n	8001928 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800190e:	4b8b      	ldr	r3, [pc, #556]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001916:	2b0c      	cmp	r3, #12
 8001918:	d112      	bne.n	8001940 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800191a:	4b88      	ldr	r3, [pc, #544]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001922:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001926:	d10b      	bne.n	8001940 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001928:	4b84      	ldr	r3, [pc, #528]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d05b      	beq.n	80019ec <HAL_RCC_OscConfig+0x124>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d157      	bne.n	80019ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e25a      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001948:	d106      	bne.n	8001958 <HAL_RCC_OscConfig+0x90>
 800194a:	4b7c      	ldr	r3, [pc, #496]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a7b      	ldr	r2, [pc, #492]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e01d      	b.n	8001994 <HAL_RCC_OscConfig+0xcc>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001960:	d10c      	bne.n	800197c <HAL_RCC_OscConfig+0xb4>
 8001962:	4b76      	ldr	r3, [pc, #472]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a75      	ldr	r2, [pc, #468]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	4b73      	ldr	r3, [pc, #460]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a72      	ldr	r2, [pc, #456]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e00b      	b.n	8001994 <HAL_RCC_OscConfig+0xcc>
 800197c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a6e      	ldr	r2, [pc, #440]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b6c      	ldr	r3, [pc, #432]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a6b      	ldr	r2, [pc, #428]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 800198e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d013      	beq.n	80019c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff f91a 	bl	8000bd4 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff f916 	bl	8000bd4 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	@ 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e21f      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	4b61      	ldr	r3, [pc, #388]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0xdc>
 80019c2:	e014      	b.n	80019ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff f906 	bl	8000bd4 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019cc:	f7ff f902 	bl	8000bd4 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b64      	cmp	r3, #100	@ 0x64
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e20b      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019de:	4b57      	ldr	r3, [pc, #348]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x104>
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d06f      	beq.n	8001ada <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019fa:	4b50      	ldr	r3, [pc, #320]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d017      	beq.n	8001a36 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a06:	4b4d      	ldr	r3, [pc, #308]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d105      	bne.n	8001a1e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a12:	4b4a      	ldr	r3, [pc, #296]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00b      	beq.n	8001a36 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a1e:	4b47      	ldr	r3, [pc, #284]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a26:	2b0c      	cmp	r3, #12
 8001a28:	d11c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a2a:	4b44      	ldr	r3, [pc, #272]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d116      	bne.n	8001a64 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a36:	4b41      	ldr	r3, [pc, #260]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <HAL_RCC_OscConfig+0x186>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d001      	beq.n	8001a4e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e1d3      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4937      	ldr	r1, [pc, #220]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a62:	e03a      	b.n	8001ada <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d020      	beq.n	8001aae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a6c:	4b34      	ldr	r3, [pc, #208]	@ (8001b40 <HAL_RCC_OscConfig+0x278>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a72:	f7ff f8af 	bl	8000bd4 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7a:	f7ff f8ab 	bl	8000bd4 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e1b4      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a98:	4b28      	ldr	r3, [pc, #160]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	4925      	ldr	r1, [pc, #148]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]
 8001aac:	e015      	b.n	8001ada <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aae:	4b24      	ldr	r3, [pc, #144]	@ (8001b40 <HAL_RCC_OscConfig+0x278>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7ff f88e 	bl	8000bd4 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001abc:	f7ff f88a 	bl	8000bd4 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e193      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ace:	4b1b      	ldr	r3, [pc, #108]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d036      	beq.n	8001b54 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d016      	beq.n	8001b1c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aee:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <HAL_RCC_OscConfig+0x27c>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af4:	f7ff f86e 	bl	8000bd4 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afc:	f7ff f86a 	bl	8000bd4 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e173      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x234>
 8001b1a:	e01b      	b.n	8001b54 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b1c:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <HAL_RCC_OscConfig+0x27c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b22:	f7ff f857 	bl	8000bd4 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b28:	e00e      	b.n	8001b48 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b2a:	f7ff f853 	bl	8000bd4 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d907      	bls.n	8001b48 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e15c      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	42470000 	.word	0x42470000
 8001b44:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b48:	4b8a      	ldr	r3, [pc, #552]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001b4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1ea      	bne.n	8001b2a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 8097 	beq.w	8001c90 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b66:	4b83      	ldr	r3, [pc, #524]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10f      	bne.n	8001b92 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	4b7f      	ldr	r3, [pc, #508]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b82:	4b7c      	ldr	r3, [pc, #496]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b92:	4b79      	ldr	r3, [pc, #484]	@ (8001d78 <HAL_RCC_OscConfig+0x4b0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d118      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b9e:	4b76      	ldr	r3, [pc, #472]	@ (8001d78 <HAL_RCC_OscConfig+0x4b0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a75      	ldr	r2, [pc, #468]	@ (8001d78 <HAL_RCC_OscConfig+0x4b0>)
 8001ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001baa:	f7ff f813 	bl	8000bd4 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb2:	f7ff f80f 	bl	8000bd4 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e118      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc4:	4b6c      	ldr	r3, [pc, #432]	@ (8001d78 <HAL_RCC_OscConfig+0x4b0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d106      	bne.n	8001be6 <HAL_RCC_OscConfig+0x31e>
 8001bd8:	4b66      	ldr	r3, [pc, #408]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bdc:	4a65      	ldr	r2, [pc, #404]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001be4:	e01c      	b.n	8001c20 <HAL_RCC_OscConfig+0x358>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b05      	cmp	r3, #5
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x340>
 8001bee:	4b61      	ldr	r3, [pc, #388]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf2:	4a60      	ldr	r2, [pc, #384]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bfa:	4b5e      	ldr	r3, [pc, #376]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bfe:	4a5d      	ldr	r2, [pc, #372]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0x358>
 8001c08:	4b5a      	ldr	r3, [pc, #360]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c0c:	4a59      	ldr	r2, [pc, #356]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c0e:	f023 0301 	bic.w	r3, r3, #1
 8001c12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c14:	4b57      	ldr	r3, [pc, #348]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c18:	4a56      	ldr	r2, [pc, #344]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c1a:	f023 0304 	bic.w	r3, r3, #4
 8001c1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d015      	beq.n	8001c54 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c28:	f7fe ffd4 	bl	8000bd4 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2e:	e00a      	b.n	8001c46 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c30:	f7fe ffd0 	bl	8000bd4 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e0d7      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c46:	4b4b      	ldr	r3, [pc, #300]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0ee      	beq.n	8001c30 <HAL_RCC_OscConfig+0x368>
 8001c52:	e014      	b.n	8001c7e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7fe ffbe 	bl	8000bd4 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5c:	f7fe ffba 	bl	8000bd4 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e0c1      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c72:	4b40      	ldr	r3, [pc, #256]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1ee      	bne.n	8001c5c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d105      	bne.n	8001c90 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c84:	4b3b      	ldr	r3, [pc, #236]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c88:	4a3a      	ldr	r2, [pc, #232]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80ad 	beq.w	8001df4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c9a:	4b36      	ldr	r3, [pc, #216]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d060      	beq.n	8001d68 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d145      	bne.n	8001d3a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cae:	4b33      	ldr	r3, [pc, #204]	@ (8001d7c <HAL_RCC_OscConfig+0x4b4>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7fe ff8e 	bl	8000bd4 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7fe ff8a 	bl	8000bd4 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e093      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cce:	4b29      	ldr	r3, [pc, #164]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69da      	ldr	r2, [r3, #28]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce8:	019b      	lsls	r3, r3, #6
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf0:	085b      	lsrs	r3, r3, #1
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	041b      	lsls	r3, r3, #16
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfc:	061b      	lsls	r3, r3, #24
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d04:	071b      	lsls	r3, r3, #28
 8001d06:	491b      	ldr	r1, [pc, #108]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d7c <HAL_RCC_OscConfig+0x4b4>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d12:	f7fe ff5f 	bl	8000bd4 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1a:	f7fe ff5b 	bl	8000bd4 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e064      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2c:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0x452>
 8001d38:	e05c      	b.n	8001df4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3a:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <HAL_RCC_OscConfig+0x4b4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7fe ff48 	bl	8000bd4 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d48:	f7fe ff44 	bl	8000bd4 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e04d      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5a:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x480>
 8001d66:	e045      	b.n	8001df4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d107      	bne.n	8001d80 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e040      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40007000 	.word	0x40007000
 8001d7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d80:	4b1f      	ldr	r3, [pc, #124]	@ (8001e00 <HAL_RCC_OscConfig+0x538>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d030      	beq.n	8001df0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d129      	bne.n	8001df0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d122      	bne.n	8001df0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001db0:	4013      	ands	r3, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001db6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d119      	bne.n	8001df0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc6:	085b      	lsrs	r3, r3, #1
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d10f      	bne.n	8001df0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d107      	bne.n	8001df0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800

08001e04 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e16:	2b84      	cmp	r3, #132	@ 0x84
 8001e18:	d005      	beq.n	8001e26 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001e1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4413      	add	r3, r2
 8001e22:	3303      	adds	r3, #3
 8001e24:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001e38:	f000 fae4 	bl	8002404 <vTaskStartScheduler>
  
  return osOK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001e42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e44:	b089      	sub	sp, #36	@ 0x24
 8001e46:	af04      	add	r7, sp, #16
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d020      	beq.n	8001e96 <osThreadCreate+0x54>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d01c      	beq.n	8001e96 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685c      	ldr	r4, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691e      	ldr	r6, [r3, #16]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff ffc8 	bl	8001e04 <makeFreeRtosPriority>
 8001e74:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e7e:	9202      	str	r2, [sp, #8]
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	9100      	str	r1, [sp, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	4632      	mov	r2, r6
 8001e88:	4629      	mov	r1, r5
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f000 f8ed 	bl	800206a <xTaskCreateStatic>
 8001e90:	4603      	mov	r3, r0
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	e01c      	b.n	8001ed0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685c      	ldr	r4, [r3, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ea2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff ffaa 	bl	8001e04 <makeFreeRtosPriority>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	f107 030c 	add.w	r3, r7, #12
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	9200      	str	r2, [sp, #0]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	4632      	mov	r2, r6
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	f000 f932 	bl	800212a <xTaskCreate>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d001      	beq.n	8001ed0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e000      	b.n	8001ed2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001eda <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <osDelay+0x16>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	e000      	b.n	8001ef2 <osDelay+0x18>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 fa50 	bl	8002398 <vTaskDelay>
  
  return osOK;
 8001ef8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f103 0208 	add.w	r2, r3, #8
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f103 0208 	add.w	r2, r3, #8
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f103 0208 	add.w	r2, r3, #8
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	601a      	str	r2, [r3, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fba:	d103      	bne.n	8001fc4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	e00c      	b.n	8001fde <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3308      	adds	r3, #8
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	e002      	b.n	8001fd2 <vListInsert+0x2e>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d2f6      	bcs.n	8001fcc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	601a      	str	r2, [r3, #0]
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002016:	b480      	push	{r7}
 8002018:	b085      	sub	sp, #20
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6892      	ldr	r2, [r2, #8]
 800202c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6852      	ldr	r2, [r2, #4]
 8002036:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	429a      	cmp	r2, r3
 8002040:	d103      	bne.n	800204a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	1e5a      	subs	r2, r3, #1
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800206a:	b580      	push	{r7, lr}
 800206c:	b08e      	sub	sp, #56	@ 0x38
 800206e:	af04      	add	r7, sp, #16
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10b      	bne.n	8002096 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800207e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002082:	f383 8811 	msr	BASEPRI, r3
 8002086:	f3bf 8f6f 	isb	sy
 800208a:	f3bf 8f4f 	dsb	sy
 800208e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	e7fd      	b.n	8002092 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10b      	bne.n	80020b4 <xTaskCreateStatic+0x4a>
	__asm volatile
 800209c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020a0:	f383 8811 	msr	BASEPRI, r3
 80020a4:	f3bf 8f6f 	isb	sy
 80020a8:	f3bf 8f4f 	dsb	sy
 80020ac:	61fb      	str	r3, [r7, #28]
}
 80020ae:	bf00      	nop
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80020b4:	2354      	movs	r3, #84	@ 0x54
 80020b6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	2b54      	cmp	r3, #84	@ 0x54
 80020bc:	d00b      	beq.n	80020d6 <xTaskCreateStatic+0x6c>
	__asm volatile
 80020be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020c2:	f383 8811 	msr	BASEPRI, r3
 80020c6:	f3bf 8f6f 	isb	sy
 80020ca:	f3bf 8f4f 	dsb	sy
 80020ce:	61bb      	str	r3, [r7, #24]
}
 80020d0:	bf00      	nop
 80020d2:	bf00      	nop
 80020d4:	e7fd      	b.n	80020d2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80020d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80020d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d01e      	beq.n	800211c <xTaskCreateStatic+0xb2>
 80020de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01b      	beq.n	800211c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80020e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80020e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80020ec:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	2202      	movs	r2, #2
 80020f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80020f6:	2300      	movs	r3, #0
 80020f8:	9303      	str	r3, [sp, #12]
 80020fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fc:	9302      	str	r3, [sp, #8]
 80020fe:	f107 0314 	add.w	r3, r7, #20
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f850 	bl	80021b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002114:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002116:	f000 f8d5 	bl	80022c4 <prvAddNewTaskToReadyList>
 800211a:	e001      	b.n	8002120 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002120:	697b      	ldr	r3, [r7, #20]
	}
 8002122:	4618      	mov	r0, r3
 8002124:	3728      	adds	r7, #40	@ 0x28
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800212a:	b580      	push	{r7, lr}
 800212c:	b08c      	sub	sp, #48	@ 0x30
 800212e:	af04      	add	r7, sp, #16
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	603b      	str	r3, [r7, #0]
 8002136:	4613      	mov	r3, r2
 8002138:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4618      	mov	r0, r3
 8002140:	f000 fef2 	bl	8002f28 <pvPortMalloc>
 8002144:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00e      	beq.n	800216a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800214c:	2054      	movs	r0, #84	@ 0x54
 800214e:	f000 feeb 	bl	8002f28 <pvPortMalloc>
 8002152:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002160:	e005      	b.n	800216e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002162:	6978      	ldr	r0, [r7, #20]
 8002164:	f000 ffae 	bl	80030c4 <vPortFree>
 8002168:	e001      	b.n	800216e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d017      	beq.n	80021a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800217c:	88fa      	ldrh	r2, [r7, #6]
 800217e:	2300      	movs	r3, #0
 8002180:	9303      	str	r3, [sp, #12]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	9302      	str	r3, [sp, #8]
 8002186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f80e 	bl	80021b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002198:	69f8      	ldr	r0, [r7, #28]
 800219a:	f000 f893 	bl	80022c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800219e:	2301      	movs	r3, #1
 80021a0:	61bb      	str	r3, [r7, #24]
 80021a2:	e002      	b.n	80021aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295
 80021a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80021aa:	69bb      	ldr	r3, [r7, #24]
	}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80021c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021cc:	3b01      	subs	r3, #1
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	f023 0307 	bic.w	r3, r3, #7
 80021da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <prvInitialiseNewTask+0x4a>
	__asm volatile
 80021e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021ea:	f383 8811 	msr	BASEPRI, r3
 80021ee:	f3bf 8f6f 	isb	sy
 80021f2:	f3bf 8f4f 	dsb	sy
 80021f6:	617b      	str	r3, [r7, #20]
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	e7fd      	b.n	80021fa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d01f      	beq.n	8002244 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	e012      	b.n	8002230 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	4413      	add	r3, r2
 8002210:	7819      	ldrb	r1, [r3, #0]
 8002212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	4413      	add	r3, r2
 8002218:	3334      	adds	r3, #52	@ 0x34
 800221a:	460a      	mov	r2, r1
 800221c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	4413      	add	r3, r2
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3301      	adds	r3, #1
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	2b0f      	cmp	r3, #15
 8002234:	d9e9      	bls.n	800220a <prvInitialiseNewTask+0x56>
 8002236:	e000      	b.n	800223a <prvInitialiseNewTask+0x86>
			{
				break;
 8002238:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800223a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002242:	e003      	b.n	800224c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800224c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800224e:	2b06      	cmp	r3, #6
 8002250:	d901      	bls.n	8002256 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002252:	2306      	movs	r3, #6
 8002254:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002258:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800225a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800225c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002260:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002264:	2200      	movs	r2, #0
 8002266:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226a:	3304      	adds	r3, #4
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fe68 	bl	8001f42 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002274:	3318      	adds	r3, #24
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fe63 	bl	8001f42 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800227c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800227e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002280:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002284:	f1c3 0207 	rsb	r2, r3, #7
 8002288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800228a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800228c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800228e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002290:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002294:	2200      	movs	r2, #0
 8002296:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	68f9      	ldr	r1, [r7, #12]
 80022a4:	69b8      	ldr	r0, [r7, #24]
 80022a6:	f000 fc2b 	bl	8002b00 <pxPortInitialiseStack>
 80022aa:	4602      	mov	r2, r0
 80022ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80022b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80022bc:	bf00      	nop
 80022be:	3720      	adds	r7, #32
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80022cc:	f000 fd4c 	bl	8002d68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80022d0:	4b2a      	ldr	r3, [pc, #168]	@ (800237c <prvAddNewTaskToReadyList+0xb8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	3301      	adds	r3, #1
 80022d6:	4a29      	ldr	r2, [pc, #164]	@ (800237c <prvAddNewTaskToReadyList+0xb8>)
 80022d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80022da:	4b29      	ldr	r3, [pc, #164]	@ (8002380 <prvAddNewTaskToReadyList+0xbc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d109      	bne.n	80022f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80022e2:	4a27      	ldr	r2, [pc, #156]	@ (8002380 <prvAddNewTaskToReadyList+0xbc>)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022e8:	4b24      	ldr	r3, [pc, #144]	@ (800237c <prvAddNewTaskToReadyList+0xb8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d110      	bne.n	8002312 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80022f0:	f000 fac4 	bl	800287c <prvInitialiseTaskLists>
 80022f4:	e00d      	b.n	8002312 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80022f6:	4b23      	ldr	r3, [pc, #140]	@ (8002384 <prvAddNewTaskToReadyList+0xc0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d109      	bne.n	8002312 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80022fe:	4b20      	ldr	r3, [pc, #128]	@ (8002380 <prvAddNewTaskToReadyList+0xbc>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002308:	429a      	cmp	r2, r3
 800230a:	d802      	bhi.n	8002312 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800230c:	4a1c      	ldr	r2, [pc, #112]	@ (8002380 <prvAddNewTaskToReadyList+0xbc>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002312:	4b1d      	ldr	r3, [pc, #116]	@ (8002388 <prvAddNewTaskToReadyList+0xc4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	3301      	adds	r3, #1
 8002318:	4a1b      	ldr	r2, [pc, #108]	@ (8002388 <prvAddNewTaskToReadyList+0xc4>)
 800231a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002320:	2201      	movs	r2, #1
 8002322:	409a      	lsls	r2, r3
 8002324:	4b19      	ldr	r3, [pc, #100]	@ (800238c <prvAddNewTaskToReadyList+0xc8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4313      	orrs	r3, r2
 800232a:	4a18      	ldr	r2, [pc, #96]	@ (800238c <prvAddNewTaskToReadyList+0xc8>)
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4a15      	ldr	r2, [pc, #84]	@ (8002390 <prvAddNewTaskToReadyList+0xcc>)
 800233c:	441a      	add	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3304      	adds	r3, #4
 8002342:	4619      	mov	r1, r3
 8002344:	4610      	mov	r0, r2
 8002346:	f7ff fe09 	bl	8001f5c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800234a:	f000 fd3f 	bl	8002dcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800234e:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <prvAddNewTaskToReadyList+0xc0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00e      	beq.n	8002374 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002356:	4b0a      	ldr	r3, [pc, #40]	@ (8002380 <prvAddNewTaskToReadyList+0xbc>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002360:	429a      	cmp	r2, r3
 8002362:	d207      	bcs.n	8002374 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002364:	4b0b      	ldr	r3, [pc, #44]	@ (8002394 <prvAddNewTaskToReadyList+0xd0>)
 8002366:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	f3bf 8f4f 	dsb	sy
 8002370:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000440 	.word	0x20000440
 8002380:	20000340 	.word	0x20000340
 8002384:	2000044c 	.word	0x2000044c
 8002388:	2000045c 	.word	0x2000045c
 800238c:	20000448 	.word	0x20000448
 8002390:	20000344 	.word	0x20000344
 8002394:	e000ed04 	.word	0xe000ed04

08002398 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d018      	beq.n	80023dc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80023aa:	4b14      	ldr	r3, [pc, #80]	@ (80023fc <vTaskDelay+0x64>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <vTaskDelay+0x32>
	__asm volatile
 80023b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023b6:	f383 8811 	msr	BASEPRI, r3
 80023ba:	f3bf 8f6f 	isb	sy
 80023be:	f3bf 8f4f 	dsb	sy
 80023c2:	60bb      	str	r3, [r7, #8]
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	e7fd      	b.n	80023c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80023ca:	f000 f87d 	bl	80024c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80023ce:	2100      	movs	r1, #0
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 fb2f 	bl	8002a34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80023d6:	f000 f885 	bl	80024e4 <xTaskResumeAll>
 80023da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d107      	bne.n	80023f2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80023e2:	4b07      	ldr	r3, [pc, #28]	@ (8002400 <vTaskDelay+0x68>)
 80023e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	f3bf 8f4f 	dsb	sy
 80023ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000468 	.word	0x20000468
 8002400:	e000ed04 	.word	0xe000ed04

08002404 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	@ 0x28
 8002408:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002412:	463a      	mov	r2, r7
 8002414:	1d39      	adds	r1, r7, #4
 8002416:	f107 0308 	add.w	r3, r7, #8
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe f88e 	bl	800053c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002420:	6839      	ldr	r1, [r7, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	9202      	str	r2, [sp, #8]
 8002428:	9301      	str	r3, [sp, #4]
 800242a:	2300      	movs	r3, #0
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	2300      	movs	r3, #0
 8002430:	460a      	mov	r2, r1
 8002432:	491f      	ldr	r1, [pc, #124]	@ (80024b0 <vTaskStartScheduler+0xac>)
 8002434:	481f      	ldr	r0, [pc, #124]	@ (80024b4 <vTaskStartScheduler+0xb0>)
 8002436:	f7ff fe18 	bl	800206a <xTaskCreateStatic>
 800243a:	4603      	mov	r3, r0
 800243c:	4a1e      	ldr	r2, [pc, #120]	@ (80024b8 <vTaskStartScheduler+0xb4>)
 800243e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002440:	4b1d      	ldr	r3, [pc, #116]	@ (80024b8 <vTaskStartScheduler+0xb4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002448:	2301      	movs	r3, #1
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	e001      	b.n	8002452 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d116      	bne.n	8002486 <vTaskStartScheduler+0x82>
	__asm volatile
 8002458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800245c:	f383 8811 	msr	BASEPRI, r3
 8002460:	f3bf 8f6f 	isb	sy
 8002464:	f3bf 8f4f 	dsb	sy
 8002468:	613b      	str	r3, [r7, #16]
}
 800246a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800246c:	4b13      	ldr	r3, [pc, #76]	@ (80024bc <vTaskStartScheduler+0xb8>)
 800246e:	f04f 32ff 	mov.w	r2, #4294967295
 8002472:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002474:	4b12      	ldr	r3, [pc, #72]	@ (80024c0 <vTaskStartScheduler+0xbc>)
 8002476:	2201      	movs	r2, #1
 8002478:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800247a:	4b12      	ldr	r3, [pc, #72]	@ (80024c4 <vTaskStartScheduler+0xc0>)
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002480:	f000 fbce 	bl	8002c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002484:	e00f      	b.n	80024a6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d10b      	bne.n	80024a6 <vTaskStartScheduler+0xa2>
	__asm volatile
 800248e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002492:	f383 8811 	msr	BASEPRI, r3
 8002496:	f3bf 8f6f 	isb	sy
 800249a:	f3bf 8f4f 	dsb	sy
 800249e:	60fb      	str	r3, [r7, #12]
}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	e7fd      	b.n	80024a2 <vTaskStartScheduler+0x9e>
}
 80024a6:	bf00      	nop
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	08003438 	.word	0x08003438
 80024b4:	0800284d 	.word	0x0800284d
 80024b8:	20000464 	.word	0x20000464
 80024bc:	20000460 	.word	0x20000460
 80024c0:	2000044c 	.word	0x2000044c
 80024c4:	20000444 	.word	0x20000444

080024c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80024cc:	4b04      	ldr	r3, [pc, #16]	@ (80024e0 <vTaskSuspendAll+0x18>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	3301      	adds	r3, #1
 80024d2:	4a03      	ldr	r2, [pc, #12]	@ (80024e0 <vTaskSuspendAll+0x18>)
 80024d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	20000468 	.word	0x20000468

080024e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80024f2:	4b42      	ldr	r3, [pc, #264]	@ (80025fc <xTaskResumeAll+0x118>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10b      	bne.n	8002512 <xTaskResumeAll+0x2e>
	__asm volatile
 80024fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024fe:	f383 8811 	msr	BASEPRI, r3
 8002502:	f3bf 8f6f 	isb	sy
 8002506:	f3bf 8f4f 	dsb	sy
 800250a:	603b      	str	r3, [r7, #0]
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	e7fd      	b.n	800250e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002512:	f000 fc29 	bl	8002d68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002516:	4b39      	ldr	r3, [pc, #228]	@ (80025fc <xTaskResumeAll+0x118>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	3b01      	subs	r3, #1
 800251c:	4a37      	ldr	r2, [pc, #220]	@ (80025fc <xTaskResumeAll+0x118>)
 800251e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002520:	4b36      	ldr	r3, [pc, #216]	@ (80025fc <xTaskResumeAll+0x118>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d161      	bne.n	80025ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002528:	4b35      	ldr	r3, [pc, #212]	@ (8002600 <xTaskResumeAll+0x11c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d05d      	beq.n	80025ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002530:	e02e      	b.n	8002590 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002532:	4b34      	ldr	r3, [pc, #208]	@ (8002604 <xTaskResumeAll+0x120>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	3318      	adds	r3, #24
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fd69 	bl	8002016 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	3304      	adds	r3, #4
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fd64 	bl	8002016 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002552:	2201      	movs	r2, #1
 8002554:	409a      	lsls	r2, r3
 8002556:	4b2c      	ldr	r3, [pc, #176]	@ (8002608 <xTaskResumeAll+0x124>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4313      	orrs	r3, r2
 800255c:	4a2a      	ldr	r2, [pc, #168]	@ (8002608 <xTaskResumeAll+0x124>)
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4a27      	ldr	r2, [pc, #156]	@ (800260c <xTaskResumeAll+0x128>)
 800256e:	441a      	add	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	3304      	adds	r3, #4
 8002574:	4619      	mov	r1, r3
 8002576:	4610      	mov	r0, r2
 8002578:	f7ff fcf0 	bl	8001f5c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002580:	4b23      	ldr	r3, [pc, #140]	@ (8002610 <xTaskResumeAll+0x12c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002586:	429a      	cmp	r2, r3
 8002588:	d302      	bcc.n	8002590 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800258a:	4b22      	ldr	r3, [pc, #136]	@ (8002614 <xTaskResumeAll+0x130>)
 800258c:	2201      	movs	r2, #1
 800258e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002590:	4b1c      	ldr	r3, [pc, #112]	@ (8002604 <xTaskResumeAll+0x120>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1cc      	bne.n	8002532 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800259e:	f000 fa0b 	bl	80029b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80025a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002618 <xTaskResumeAll+0x134>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d010      	beq.n	80025d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80025ae:	f000 f837 	bl	8002620 <xTaskIncrementTick>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80025b8:	4b16      	ldr	r3, [pc, #88]	@ (8002614 <xTaskResumeAll+0x130>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f1      	bne.n	80025ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80025ca:	4b13      	ldr	r3, [pc, #76]	@ (8002618 <xTaskResumeAll+0x134>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80025d0:	4b10      	ldr	r3, [pc, #64]	@ (8002614 <xTaskResumeAll+0x130>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d009      	beq.n	80025ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80025d8:	2301      	movs	r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80025dc:	4b0f      	ldr	r3, [pc, #60]	@ (800261c <xTaskResumeAll+0x138>)
 80025de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80025ec:	f000 fbee 	bl	8002dcc <vPortExitCritical>

	return xAlreadyYielded;
 80025f0:	68bb      	ldr	r3, [r7, #8]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000468 	.word	0x20000468
 8002600:	20000440 	.word	0x20000440
 8002604:	20000400 	.word	0x20000400
 8002608:	20000448 	.word	0x20000448
 800260c:	20000344 	.word	0x20000344
 8002610:	20000340 	.word	0x20000340
 8002614:	20000454 	.word	0x20000454
 8002618:	20000450 	.word	0x20000450
 800261c:	e000ed04 	.word	0xe000ed04

08002620 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800262a:	4b4f      	ldr	r3, [pc, #316]	@ (8002768 <xTaskIncrementTick+0x148>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	f040 808f 	bne.w	8002752 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002634:	4b4d      	ldr	r3, [pc, #308]	@ (800276c <xTaskIncrementTick+0x14c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3301      	adds	r3, #1
 800263a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800263c:	4a4b      	ldr	r2, [pc, #300]	@ (800276c <xTaskIncrementTick+0x14c>)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d121      	bne.n	800268c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002648:	4b49      	ldr	r3, [pc, #292]	@ (8002770 <xTaskIncrementTick+0x150>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00b      	beq.n	800266a <xTaskIncrementTick+0x4a>
	__asm volatile
 8002652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002656:	f383 8811 	msr	BASEPRI, r3
 800265a:	f3bf 8f6f 	isb	sy
 800265e:	f3bf 8f4f 	dsb	sy
 8002662:	603b      	str	r3, [r7, #0]
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	e7fd      	b.n	8002666 <xTaskIncrementTick+0x46>
 800266a:	4b41      	ldr	r3, [pc, #260]	@ (8002770 <xTaskIncrementTick+0x150>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	4b40      	ldr	r3, [pc, #256]	@ (8002774 <xTaskIncrementTick+0x154>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a3e      	ldr	r2, [pc, #248]	@ (8002770 <xTaskIncrementTick+0x150>)
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	4a3e      	ldr	r2, [pc, #248]	@ (8002774 <xTaskIncrementTick+0x154>)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4b3e      	ldr	r3, [pc, #248]	@ (8002778 <xTaskIncrementTick+0x158>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	3301      	adds	r3, #1
 8002684:	4a3c      	ldr	r2, [pc, #240]	@ (8002778 <xTaskIncrementTick+0x158>)
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	f000 f996 	bl	80029b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800268c:	4b3b      	ldr	r3, [pc, #236]	@ (800277c <xTaskIncrementTick+0x15c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	429a      	cmp	r2, r3
 8002694:	d348      	bcc.n	8002728 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002696:	4b36      	ldr	r3, [pc, #216]	@ (8002770 <xTaskIncrementTick+0x150>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d104      	bne.n	80026aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026a0:	4b36      	ldr	r3, [pc, #216]	@ (800277c <xTaskIncrementTick+0x15c>)
 80026a2:	f04f 32ff 	mov.w	r2, #4294967295
 80026a6:	601a      	str	r2, [r3, #0]
					break;
 80026a8:	e03e      	b.n	8002728 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026aa:	4b31      	ldr	r3, [pc, #196]	@ (8002770 <xTaskIncrementTick+0x150>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d203      	bcs.n	80026ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80026c2:	4a2e      	ldr	r2, [pc, #184]	@ (800277c <xTaskIncrementTick+0x15c>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80026c8:	e02e      	b.n	8002728 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	3304      	adds	r3, #4
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fca1 	bl	8002016 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d004      	beq.n	80026e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	3318      	adds	r3, #24
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fc98 	bl	8002016 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ea:	2201      	movs	r2, #1
 80026ec:	409a      	lsls	r2, r3
 80026ee:	4b24      	ldr	r3, [pc, #144]	@ (8002780 <xTaskIncrementTick+0x160>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	4a22      	ldr	r2, [pc, #136]	@ (8002780 <xTaskIncrementTick+0x160>)
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4a1f      	ldr	r2, [pc, #124]	@ (8002784 <xTaskIncrementTick+0x164>)
 8002706:	441a      	add	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	3304      	adds	r3, #4
 800270c:	4619      	mov	r1, r3
 800270e:	4610      	mov	r0, r2
 8002710:	f7ff fc24 	bl	8001f5c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002718:	4b1b      	ldr	r3, [pc, #108]	@ (8002788 <xTaskIncrementTick+0x168>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271e:	429a      	cmp	r2, r3
 8002720:	d3b9      	bcc.n	8002696 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002722:	2301      	movs	r3, #1
 8002724:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002726:	e7b6      	b.n	8002696 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002728:	4b17      	ldr	r3, [pc, #92]	@ (8002788 <xTaskIncrementTick+0x168>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800272e:	4915      	ldr	r1, [pc, #84]	@ (8002784 <xTaskIncrementTick+0x164>)
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d901      	bls.n	8002744 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002740:	2301      	movs	r3, #1
 8002742:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002744:	4b11      	ldr	r3, [pc, #68]	@ (800278c <xTaskIncrementTick+0x16c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d007      	beq.n	800275c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800274c:	2301      	movs	r3, #1
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	e004      	b.n	800275c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002752:	4b0f      	ldr	r3, [pc, #60]	@ (8002790 <xTaskIncrementTick+0x170>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3301      	adds	r3, #1
 8002758:	4a0d      	ldr	r2, [pc, #52]	@ (8002790 <xTaskIncrementTick+0x170>)
 800275a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800275c:	697b      	ldr	r3, [r7, #20]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000468 	.word	0x20000468
 800276c:	20000444 	.word	0x20000444
 8002770:	200003f8 	.word	0x200003f8
 8002774:	200003fc 	.word	0x200003fc
 8002778:	20000458 	.word	0x20000458
 800277c:	20000460 	.word	0x20000460
 8002780:	20000448 	.word	0x20000448
 8002784:	20000344 	.word	0x20000344
 8002788:	20000340 	.word	0x20000340
 800278c:	20000454 	.word	0x20000454
 8002790:	20000450 	.word	0x20000450

08002794 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800279a:	4b27      	ldr	r3, [pc, #156]	@ (8002838 <vTaskSwitchContext+0xa4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80027a2:	4b26      	ldr	r3, [pc, #152]	@ (800283c <vTaskSwitchContext+0xa8>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80027a8:	e040      	b.n	800282c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80027aa:	4b24      	ldr	r3, [pc, #144]	@ (800283c <vTaskSwitchContext+0xa8>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027b0:	4b23      	ldr	r3, [pc, #140]	@ (8002840 <vTaskSwitchContext+0xac>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	fab3 f383 	clz	r3, r3
 80027bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80027be:	7afb      	ldrb	r3, [r7, #11]
 80027c0:	f1c3 031f 	rsb	r3, r3, #31
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	491f      	ldr	r1, [pc, #124]	@ (8002844 <vTaskSwitchContext+0xb0>)
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10b      	bne.n	80027f2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80027da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027de:	f383 8811 	msr	BASEPRI, r3
 80027e2:	f3bf 8f6f 	isb	sy
 80027e6:	f3bf 8f4f 	dsb	sy
 80027ea:	607b      	str	r3, [r7, #4]
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	e7fd      	b.n	80027ee <vTaskSwitchContext+0x5a>
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4a11      	ldr	r2, [pc, #68]	@ (8002844 <vTaskSwitchContext+0xb0>)
 80027fe:	4413      	add	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	3308      	adds	r3, #8
 8002814:	429a      	cmp	r2, r3
 8002816:	d104      	bne.n	8002822 <vTaskSwitchContext+0x8e>
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4a07      	ldr	r2, [pc, #28]	@ (8002848 <vTaskSwitchContext+0xb4>)
 800282a:	6013      	str	r3, [r2, #0]
}
 800282c:	bf00      	nop
 800282e:	371c      	adds	r7, #28
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	20000468 	.word	0x20000468
 800283c:	20000454 	.word	0x20000454
 8002840:	20000448 	.word	0x20000448
 8002844:	20000344 	.word	0x20000344
 8002848:	20000340 	.word	0x20000340

0800284c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002854:	f000 f852 	bl	80028fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002858:	4b06      	ldr	r3, [pc, #24]	@ (8002874 <prvIdleTask+0x28>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d9f9      	bls.n	8002854 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002860:	4b05      	ldr	r3, [pc, #20]	@ (8002878 <prvIdleTask+0x2c>)
 8002862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002870:	e7f0      	b.n	8002854 <prvIdleTask+0x8>
 8002872:	bf00      	nop
 8002874:	20000344 	.word	0x20000344
 8002878:	e000ed04 	.word	0xe000ed04

0800287c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002882:	2300      	movs	r3, #0
 8002884:	607b      	str	r3, [r7, #4]
 8002886:	e00c      	b.n	80028a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4a12      	ldr	r2, [pc, #72]	@ (80028dc <prvInitialiseTaskLists+0x60>)
 8002894:	4413      	add	r3, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fb33 	bl	8001f02 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3301      	adds	r3, #1
 80028a0:	607b      	str	r3, [r7, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b06      	cmp	r3, #6
 80028a6:	d9ef      	bls.n	8002888 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80028a8:	480d      	ldr	r0, [pc, #52]	@ (80028e0 <prvInitialiseTaskLists+0x64>)
 80028aa:	f7ff fb2a 	bl	8001f02 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80028ae:	480d      	ldr	r0, [pc, #52]	@ (80028e4 <prvInitialiseTaskLists+0x68>)
 80028b0:	f7ff fb27 	bl	8001f02 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80028b4:	480c      	ldr	r0, [pc, #48]	@ (80028e8 <prvInitialiseTaskLists+0x6c>)
 80028b6:	f7ff fb24 	bl	8001f02 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80028ba:	480c      	ldr	r0, [pc, #48]	@ (80028ec <prvInitialiseTaskLists+0x70>)
 80028bc:	f7ff fb21 	bl	8001f02 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80028c0:	480b      	ldr	r0, [pc, #44]	@ (80028f0 <prvInitialiseTaskLists+0x74>)
 80028c2:	f7ff fb1e 	bl	8001f02 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80028c6:	4b0b      	ldr	r3, [pc, #44]	@ (80028f4 <prvInitialiseTaskLists+0x78>)
 80028c8:	4a05      	ldr	r2, [pc, #20]	@ (80028e0 <prvInitialiseTaskLists+0x64>)
 80028ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80028cc:	4b0a      	ldr	r3, [pc, #40]	@ (80028f8 <prvInitialiseTaskLists+0x7c>)
 80028ce:	4a05      	ldr	r2, [pc, #20]	@ (80028e4 <prvInitialiseTaskLists+0x68>)
 80028d0:	601a      	str	r2, [r3, #0]
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000344 	.word	0x20000344
 80028e0:	200003d0 	.word	0x200003d0
 80028e4:	200003e4 	.word	0x200003e4
 80028e8:	20000400 	.word	0x20000400
 80028ec:	20000414 	.word	0x20000414
 80028f0:	2000042c 	.word	0x2000042c
 80028f4:	200003f8 	.word	0x200003f8
 80028f8:	200003fc 	.word	0x200003fc

080028fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002902:	e019      	b.n	8002938 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002904:	f000 fa30 	bl	8002d68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002908:	4b10      	ldr	r3, [pc, #64]	@ (800294c <prvCheckTasksWaitingTermination+0x50>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3304      	adds	r3, #4
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fb7e 	bl	8002016 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800291a:	4b0d      	ldr	r3, [pc, #52]	@ (8002950 <prvCheckTasksWaitingTermination+0x54>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3b01      	subs	r3, #1
 8002920:	4a0b      	ldr	r2, [pc, #44]	@ (8002950 <prvCheckTasksWaitingTermination+0x54>)
 8002922:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002924:	4b0b      	ldr	r3, [pc, #44]	@ (8002954 <prvCheckTasksWaitingTermination+0x58>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3b01      	subs	r3, #1
 800292a:	4a0a      	ldr	r2, [pc, #40]	@ (8002954 <prvCheckTasksWaitingTermination+0x58>)
 800292c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800292e:	f000 fa4d 	bl	8002dcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f810 	bl	8002958 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002938:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <prvCheckTasksWaitingTermination+0x58>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1e1      	bne.n	8002904 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000414 	.word	0x20000414
 8002950:	20000440 	.word	0x20000440
 8002954:	20000428 	.word	0x20000428

08002958 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002966:	2b00      	cmp	r3, #0
 8002968:	d108      	bne.n	800297c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fba8 	bl	80030c4 <vPortFree>
				vPortFree( pxTCB );
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fba5 	bl	80030c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800297a:	e019      	b.n	80029b0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002982:	2b01      	cmp	r3, #1
 8002984:	d103      	bne.n	800298e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fb9c 	bl	80030c4 <vPortFree>
	}
 800298c:	e010      	b.n	80029b0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002994:	2b02      	cmp	r3, #2
 8002996:	d00b      	beq.n	80029b0 <prvDeleteTCB+0x58>
	__asm volatile
 8002998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800299c:	f383 8811 	msr	BASEPRI, r3
 80029a0:	f3bf 8f6f 	isb	sy
 80029a4:	f3bf 8f4f 	dsb	sy
 80029a8:	60fb      	str	r3, [r7, #12]
}
 80029aa:	bf00      	nop
 80029ac:	bf00      	nop
 80029ae:	e7fd      	b.n	80029ac <prvDeleteTCB+0x54>
	}
 80029b0:	bf00      	nop
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029be:	4b0c      	ldr	r3, [pc, #48]	@ (80029f0 <prvResetNextTaskUnblockTime+0x38>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d104      	bne.n	80029d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80029c8:	4b0a      	ldr	r3, [pc, #40]	@ (80029f4 <prvResetNextTaskUnblockTime+0x3c>)
 80029ca:	f04f 32ff 	mov.w	r2, #4294967295
 80029ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80029d0:	e008      	b.n	80029e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029d2:	4b07      	ldr	r3, [pc, #28]	@ (80029f0 <prvResetNextTaskUnblockTime+0x38>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4a04      	ldr	r2, [pc, #16]	@ (80029f4 <prvResetNextTaskUnblockTime+0x3c>)
 80029e2:	6013      	str	r3, [r2, #0]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	200003f8 	.word	0x200003f8
 80029f4:	20000460 	.word	0x20000460

080029f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80029fe:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <xTaskGetSchedulerState+0x34>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d102      	bne.n	8002a0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002a06:	2301      	movs	r3, #1
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	e008      	b.n	8002a1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a0c:	4b08      	ldr	r3, [pc, #32]	@ (8002a30 <xTaskGetSchedulerState+0x38>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d102      	bne.n	8002a1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002a14:	2302      	movs	r3, #2
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	e001      	b.n	8002a1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002a1e:	687b      	ldr	r3, [r7, #4]
	}
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	2000044c 	.word	0x2000044c
 8002a30:	20000468 	.word	0x20000468

08002a34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002a3e:	4b29      	ldr	r3, [pc, #164]	@ (8002ae4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a44:	4b28      	ldr	r3, [pc, #160]	@ (8002ae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	3304      	adds	r3, #4
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fae3 	bl	8002016 <uxListRemove>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10b      	bne.n	8002a6e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002a56:	4b24      	ldr	r3, [pc, #144]	@ (8002ae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43da      	mvns	r2, r3
 8002a64:	4b21      	ldr	r3, [pc, #132]	@ (8002aec <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	4a20      	ldr	r2, [pc, #128]	@ (8002aec <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a6c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a74:	d10a      	bne.n	8002a8c <prvAddCurrentTaskToDelayedList+0x58>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3304      	adds	r3, #4
 8002a82:	4619      	mov	r1, r3
 8002a84:	481a      	ldr	r0, [pc, #104]	@ (8002af0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002a86:	f7ff fa69 	bl	8001f5c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a8a:	e026      	b.n	8002ada <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a94:	4b14      	ldr	r3, [pc, #80]	@ (8002ae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d209      	bcs.n	8002ab8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002aa4:	4b13      	ldr	r3, [pc, #76]	@ (8002af4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3304      	adds	r3, #4
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	f7ff fa77 	bl	8001fa4 <vListInsert>
}
 8002ab6:	e010      	b.n	8002ada <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8002af8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	f7ff fa6d 	bl	8001fa4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002aca:	4b0c      	ldr	r3, [pc, #48]	@ (8002afc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d202      	bcs.n	8002ada <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002ad4:	4a09      	ldr	r2, [pc, #36]	@ (8002afc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	6013      	str	r3, [r2, #0]
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000444 	.word	0x20000444
 8002ae8:	20000340 	.word	0x20000340
 8002aec:	20000448 	.word	0x20000448
 8002af0:	2000042c 	.word	0x2000042c
 8002af4:	200003fc 	.word	0x200003fc
 8002af8:	200003f8 	.word	0x200003f8
 8002afc:	20000460 	.word	0x20000460

08002b00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3b04      	subs	r3, #4
 8002b10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3b04      	subs	r3, #4
 8002b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f023 0201 	bic.w	r2, r3, #1
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	3b04      	subs	r3, #4
 8002b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002b30:	4a0c      	ldr	r2, [pc, #48]	@ (8002b64 <pxPortInitialiseStack+0x64>)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3b14      	subs	r3, #20
 8002b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	3b04      	subs	r3, #4
 8002b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f06f 0202 	mvn.w	r2, #2
 8002b4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3b20      	subs	r3, #32
 8002b54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002b56:	68fb      	ldr	r3, [r7, #12]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	08002b69 	.word	0x08002b69

08002b68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002b72:	4b13      	ldr	r3, [pc, #76]	@ (8002bc0 <prvTaskExitError+0x58>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7a:	d00b      	beq.n	8002b94 <prvTaskExitError+0x2c>
	__asm volatile
 8002b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	60fb      	str	r3, [r7, #12]
}
 8002b8e:	bf00      	nop
 8002b90:	bf00      	nop
 8002b92:	e7fd      	b.n	8002b90 <prvTaskExitError+0x28>
	__asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	60bb      	str	r3, [r7, #8]
}
 8002ba6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002ba8:	bf00      	nop
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0fc      	beq.n	8002baa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	2000000c 	.word	0x2000000c
	...

08002bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002bd0:	4b07      	ldr	r3, [pc, #28]	@ (8002bf0 <pxCurrentTCBConst2>)
 8002bd2:	6819      	ldr	r1, [r3, #0]
 8002bd4:	6808      	ldr	r0, [r1, #0]
 8002bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bda:	f380 8809 	msr	PSP, r0
 8002bde:	f3bf 8f6f 	isb	sy
 8002be2:	f04f 0000 	mov.w	r0, #0
 8002be6:	f380 8811 	msr	BASEPRI, r0
 8002bea:	4770      	bx	lr
 8002bec:	f3af 8000 	nop.w

08002bf0 <pxCurrentTCBConst2>:
 8002bf0:	20000340 	.word	0x20000340
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop

08002bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002bf8:	4808      	ldr	r0, [pc, #32]	@ (8002c1c <prvPortStartFirstTask+0x24>)
 8002bfa:	6800      	ldr	r0, [r0, #0]
 8002bfc:	6800      	ldr	r0, [r0, #0]
 8002bfe:	f380 8808 	msr	MSP, r0
 8002c02:	f04f 0000 	mov.w	r0, #0
 8002c06:	f380 8814 	msr	CONTROL, r0
 8002c0a:	b662      	cpsie	i
 8002c0c:	b661      	cpsie	f
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	f3bf 8f6f 	isb	sy
 8002c16:	df00      	svc	0
 8002c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002c1a:	bf00      	nop
 8002c1c:	e000ed08 	.word	0xe000ed08

08002c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c26:	4b47      	ldr	r3, [pc, #284]	@ (8002d44 <xPortStartScheduler+0x124>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a47      	ldr	r2, [pc, #284]	@ (8002d48 <xPortStartScheduler+0x128>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d10b      	bne.n	8002c48 <xPortStartScheduler+0x28>
	__asm volatile
 8002c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c34:	f383 8811 	msr	BASEPRI, r3
 8002c38:	f3bf 8f6f 	isb	sy
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	60fb      	str	r3, [r7, #12]
}
 8002c42:	bf00      	nop
 8002c44:	bf00      	nop
 8002c46:	e7fd      	b.n	8002c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c48:	4b3e      	ldr	r3, [pc, #248]	@ (8002d44 <xPortStartScheduler+0x124>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a3f      	ldr	r2, [pc, #252]	@ (8002d4c <xPortStartScheduler+0x12c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d10b      	bne.n	8002c6a <xPortStartScheduler+0x4a>
	__asm volatile
 8002c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c56:	f383 8811 	msr	BASEPRI, r3
 8002c5a:	f3bf 8f6f 	isb	sy
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	613b      	str	r3, [r7, #16]
}
 8002c64:	bf00      	nop
 8002c66:	bf00      	nop
 8002c68:	e7fd      	b.n	8002c66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c6a:	4b39      	ldr	r3, [pc, #228]	@ (8002d50 <xPortStartScheduler+0x130>)
 8002c6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	22ff      	movs	r2, #255	@ 0xff
 8002c7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4b31      	ldr	r3, [pc, #196]	@ (8002d54 <xPortStartScheduler+0x134>)
 8002c90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c92:	4b31      	ldr	r3, [pc, #196]	@ (8002d58 <xPortStartScheduler+0x138>)
 8002c94:	2207      	movs	r2, #7
 8002c96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c98:	e009      	b.n	8002cae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8002c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8002d58 <xPortStartScheduler+0x138>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	4a2d      	ldr	r2, [pc, #180]	@ (8002d58 <xPortStartScheduler+0x138>)
 8002ca2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb6:	2b80      	cmp	r3, #128	@ 0x80
 8002cb8:	d0ef      	beq.n	8002c9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002cba:	4b27      	ldr	r3, [pc, #156]	@ (8002d58 <xPortStartScheduler+0x138>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f1c3 0307 	rsb	r3, r3, #7
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d00b      	beq.n	8002cde <xPortStartScheduler+0xbe>
	__asm volatile
 8002cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cca:	f383 8811 	msr	BASEPRI, r3
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	f3bf 8f4f 	dsb	sy
 8002cd6:	60bb      	str	r3, [r7, #8]
}
 8002cd8:	bf00      	nop
 8002cda:	bf00      	nop
 8002cdc:	e7fd      	b.n	8002cda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002cde:	4b1e      	ldr	r3, [pc, #120]	@ (8002d58 <xPortStartScheduler+0x138>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	021b      	lsls	r3, r3, #8
 8002ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8002d58 <xPortStartScheduler+0x138>)
 8002ce6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d58 <xPortStartScheduler+0x138>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002cf0:	4a19      	ldr	r2, [pc, #100]	@ (8002d58 <xPortStartScheduler+0x138>)
 8002cf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002cfc:	4b17      	ldr	r3, [pc, #92]	@ (8002d5c <xPortStartScheduler+0x13c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a16      	ldr	r2, [pc, #88]	@ (8002d5c <xPortStartScheduler+0x13c>)
 8002d02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002d08:	4b14      	ldr	r3, [pc, #80]	@ (8002d5c <xPortStartScheduler+0x13c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a13      	ldr	r2, [pc, #76]	@ (8002d5c <xPortStartScheduler+0x13c>)
 8002d0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002d12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002d14:	f000 f8da 	bl	8002ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002d18:	4b11      	ldr	r3, [pc, #68]	@ (8002d60 <xPortStartScheduler+0x140>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002d1e:	f000 f8f9 	bl	8002f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002d22:	4b10      	ldr	r3, [pc, #64]	@ (8002d64 <xPortStartScheduler+0x144>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a0f      	ldr	r2, [pc, #60]	@ (8002d64 <xPortStartScheduler+0x144>)
 8002d28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002d2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002d2e:	f7ff ff63 	bl	8002bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002d32:	f7ff fd2f 	bl	8002794 <vTaskSwitchContext>
	prvTaskExitError();
 8002d36:	f7ff ff17 	bl	8002b68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	e000ed00 	.word	0xe000ed00
 8002d48:	410fc271 	.word	0x410fc271
 8002d4c:	410fc270 	.word	0x410fc270
 8002d50:	e000e400 	.word	0xe000e400
 8002d54:	2000046c 	.word	0x2000046c
 8002d58:	20000470 	.word	0x20000470
 8002d5c:	e000ed20 	.word	0xe000ed20
 8002d60:	2000000c 	.word	0x2000000c
 8002d64:	e000ef34 	.word	0xe000ef34

08002d68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8002d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	607b      	str	r3, [r7, #4]
}
 8002d80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002d82:	4b10      	ldr	r3, [pc, #64]	@ (8002dc4 <vPortEnterCritical+0x5c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	3301      	adds	r3, #1
 8002d88:	4a0e      	ldr	r2, [pc, #56]	@ (8002dc4 <vPortEnterCritical+0x5c>)
 8002d8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc4 <vPortEnterCritical+0x5c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d110      	bne.n	8002db6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d94:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc8 <vPortEnterCritical+0x60>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00b      	beq.n	8002db6 <vPortEnterCritical+0x4e>
	__asm volatile
 8002d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	603b      	str	r3, [r7, #0]
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	e7fd      	b.n	8002db2 <vPortEnterCritical+0x4a>
	}
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	2000000c 	.word	0x2000000c
 8002dc8:	e000ed04 	.word	0xe000ed04

08002dcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002dd2:	4b12      	ldr	r3, [pc, #72]	@ (8002e1c <vPortExitCritical+0x50>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10b      	bne.n	8002df2 <vPortExitCritical+0x26>
	__asm volatile
 8002dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dde:	f383 8811 	msr	BASEPRI, r3
 8002de2:	f3bf 8f6f 	isb	sy
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	607b      	str	r3, [r7, #4]
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	e7fd      	b.n	8002dee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002df2:	4b0a      	ldr	r3, [pc, #40]	@ (8002e1c <vPortExitCritical+0x50>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	4a08      	ldr	r2, [pc, #32]	@ (8002e1c <vPortExitCritical+0x50>)
 8002dfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002dfc:	4b07      	ldr	r3, [pc, #28]	@ (8002e1c <vPortExitCritical+0x50>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d105      	bne.n	8002e10 <vPortExitCritical+0x44>
 8002e04:	2300      	movs	r3, #0
 8002e06:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	2000000c 	.word	0x2000000c

08002e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002e20:	f3ef 8009 	mrs	r0, PSP
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	4b15      	ldr	r3, [pc, #84]	@ (8002e80 <pxCurrentTCBConst>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	f01e 0f10 	tst.w	lr, #16
 8002e30:	bf08      	it	eq
 8002e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e3a:	6010      	str	r0, [r2, #0]
 8002e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002e44:	f380 8811 	msr	BASEPRI, r0
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f7ff fca0 	bl	8002794 <vTaskSwitchContext>
 8002e54:	f04f 0000 	mov.w	r0, #0
 8002e58:	f380 8811 	msr	BASEPRI, r0
 8002e5c:	bc09      	pop	{r0, r3}
 8002e5e:	6819      	ldr	r1, [r3, #0]
 8002e60:	6808      	ldr	r0, [r1, #0]
 8002e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e66:	f01e 0f10 	tst.w	lr, #16
 8002e6a:	bf08      	it	eq
 8002e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e70:	f380 8809 	msr	PSP, r0
 8002e74:	f3bf 8f6f 	isb	sy
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	f3af 8000 	nop.w

08002e80 <pxCurrentTCBConst>:
 8002e80:	20000340 	.word	0x20000340
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop

08002e88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8002e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e92:	f383 8811 	msr	BASEPRI, r3
 8002e96:	f3bf 8f6f 	isb	sy
 8002e9a:	f3bf 8f4f 	dsb	sy
 8002e9e:	607b      	str	r3, [r7, #4]
}
 8002ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002ea2:	f7ff fbbd 	bl	8002620 <xTaskIncrementTick>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002eac:	4b06      	ldr	r3, [pc, #24]	@ (8002ec8 <xPortSysTickHandler+0x40>)
 8002eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	f383 8811 	msr	BASEPRI, r3
}
 8002ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	e000ed04 	.word	0xe000ed04

08002ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f00 <vPortSetupTimerInterrupt+0x34>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8002f04 <vPortSetupTimerInterrupt+0x38>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002edc:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <vPortSetupTimerInterrupt+0x3c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8002f0c <vPortSetupTimerInterrupt+0x40>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	099b      	lsrs	r3, r3, #6
 8002ee8:	4a09      	ldr	r2, [pc, #36]	@ (8002f10 <vPortSetupTimerInterrupt+0x44>)
 8002eea:	3b01      	subs	r3, #1
 8002eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002eee:	4b04      	ldr	r3, [pc, #16]	@ (8002f00 <vPortSetupTimerInterrupt+0x34>)
 8002ef0:	2207      	movs	r2, #7
 8002ef2:	601a      	str	r2, [r3, #0]
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	e000e010 	.word	0xe000e010
 8002f04:	e000e018 	.word	0xe000e018
 8002f08:	20000000 	.word	0x20000000
 8002f0c:	10624dd3 	.word	0x10624dd3
 8002f10:	e000e014 	.word	0xe000e014

08002f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002f14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002f24 <vPortEnableVFP+0x10>
 8002f18:	6801      	ldr	r1, [r0, #0]
 8002f1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002f1e:	6001      	str	r1, [r0, #0]
 8002f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002f22:	bf00      	nop
 8002f24:	e000ed88 	.word	0xe000ed88

08002f28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	@ 0x28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002f34:	f7ff fac8 	bl	80024c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002f38:	4b5c      	ldr	r3, [pc, #368]	@ (80030ac <pvPortMalloc+0x184>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002f40:	f000 f924 	bl	800318c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002f44:	4b5a      	ldr	r3, [pc, #360]	@ (80030b0 <pvPortMalloc+0x188>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f040 8095 	bne.w	800307c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01e      	beq.n	8002f96 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002f58:	2208      	movs	r2, #8
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d015      	beq.n	8002f96 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f023 0307 	bic.w	r3, r3, #7
 8002f70:	3308      	adds	r3, #8
 8002f72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00b      	beq.n	8002f96 <pvPortMalloc+0x6e>
	__asm volatile
 8002f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	617b      	str	r3, [r7, #20]
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	e7fd      	b.n	8002f92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d06f      	beq.n	800307c <pvPortMalloc+0x154>
 8002f9c:	4b45      	ldr	r3, [pc, #276]	@ (80030b4 <pvPortMalloc+0x18c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d86a      	bhi.n	800307c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002fa6:	4b44      	ldr	r3, [pc, #272]	@ (80030b8 <pvPortMalloc+0x190>)
 8002fa8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002faa:	4b43      	ldr	r3, [pc, #268]	@ (80030b8 <pvPortMalloc+0x190>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002fb0:	e004      	b.n	8002fbc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d903      	bls.n	8002fce <pvPortMalloc+0xa6>
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f1      	bne.n	8002fb2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002fce:	4b37      	ldr	r3, [pc, #220]	@ (80030ac <pvPortMalloc+0x184>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d051      	beq.n	800307c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2208      	movs	r2, #8
 8002fde:	4413      	add	r3, r2
 8002fe0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	1ad2      	subs	r2, r2, r3
 8002ff2:	2308      	movs	r3, #8
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d920      	bls.n	800303c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4413      	add	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <pvPortMalloc+0xfc>
	__asm volatile
 800300c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003010:	f383 8811 	msr	BASEPRI, r3
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	613b      	str	r3, [r7, #16]
}
 800301e:	bf00      	nop
 8003020:	bf00      	nop
 8003022:	e7fd      	b.n	8003020 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	1ad2      	subs	r2, r2, r3
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003036:	69b8      	ldr	r0, [r7, #24]
 8003038:	f000 f90a 	bl	8003250 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800303c:	4b1d      	ldr	r3, [pc, #116]	@ (80030b4 <pvPortMalloc+0x18c>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	4a1b      	ldr	r2, [pc, #108]	@ (80030b4 <pvPortMalloc+0x18c>)
 8003048:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800304a:	4b1a      	ldr	r3, [pc, #104]	@ (80030b4 <pvPortMalloc+0x18c>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	4b1b      	ldr	r3, [pc, #108]	@ (80030bc <pvPortMalloc+0x194>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d203      	bcs.n	800305e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003056:	4b17      	ldr	r3, [pc, #92]	@ (80030b4 <pvPortMalloc+0x18c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a18      	ldr	r2, [pc, #96]	@ (80030bc <pvPortMalloc+0x194>)
 800305c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	4b13      	ldr	r3, [pc, #76]	@ (80030b0 <pvPortMalloc+0x188>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	431a      	orrs	r2, r3
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800306c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003072:	4b13      	ldr	r3, [pc, #76]	@ (80030c0 <pvPortMalloc+0x198>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3301      	adds	r3, #1
 8003078:	4a11      	ldr	r2, [pc, #68]	@ (80030c0 <pvPortMalloc+0x198>)
 800307a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800307c:	f7ff fa32 	bl	80024e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00b      	beq.n	80030a2 <pvPortMalloc+0x17a>
	__asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	60fb      	str	r3, [r7, #12]
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	e7fd      	b.n	800309e <pvPortMalloc+0x176>
	return pvReturn;
 80030a2:	69fb      	ldr	r3, [r7, #28]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3728      	adds	r7, #40	@ 0x28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	2000407c 	.word	0x2000407c
 80030b0:	20004090 	.word	0x20004090
 80030b4:	20004080 	.word	0x20004080
 80030b8:	20004074 	.word	0x20004074
 80030bc:	20004084 	.word	0x20004084
 80030c0:	20004088 	.word	0x20004088

080030c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d04f      	beq.n	8003176 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80030d6:	2308      	movs	r3, #8
 80030d8:	425b      	negs	r3, r3
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4413      	add	r3, r2
 80030de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	4b25      	ldr	r3, [pc, #148]	@ (8003180 <vPortFree+0xbc>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10b      	bne.n	800310a <vPortFree+0x46>
	__asm volatile
 80030f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	60fb      	str	r3, [r7, #12]
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	e7fd      	b.n	8003106 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00b      	beq.n	800312a <vPortFree+0x66>
	__asm volatile
 8003112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	60bb      	str	r3, [r7, #8]
}
 8003124:	bf00      	nop
 8003126:	bf00      	nop
 8003128:	e7fd      	b.n	8003126 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	4b14      	ldr	r3, [pc, #80]	@ (8003180 <vPortFree+0xbc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4013      	ands	r3, r2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01e      	beq.n	8003176 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d11a      	bne.n	8003176 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	4b0e      	ldr	r3, [pc, #56]	@ (8003180 <vPortFree+0xbc>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	43db      	mvns	r3, r3
 800314a:	401a      	ands	r2, r3
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003150:	f7ff f9ba 	bl	80024c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	4b0a      	ldr	r3, [pc, #40]	@ (8003184 <vPortFree+0xc0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4413      	add	r3, r2
 800315e:	4a09      	ldr	r2, [pc, #36]	@ (8003184 <vPortFree+0xc0>)
 8003160:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003162:	6938      	ldr	r0, [r7, #16]
 8003164:	f000 f874 	bl	8003250 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003168:	4b07      	ldr	r3, [pc, #28]	@ (8003188 <vPortFree+0xc4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3301      	adds	r3, #1
 800316e:	4a06      	ldr	r2, [pc, #24]	@ (8003188 <vPortFree+0xc4>)
 8003170:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003172:	f7ff f9b7 	bl	80024e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003176:	bf00      	nop
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20004090 	.word	0x20004090
 8003184:	20004080 	.word	0x20004080
 8003188:	2000408c 	.word	0x2000408c

0800318c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003192:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003196:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003198:	4b27      	ldr	r3, [pc, #156]	@ (8003238 <prvHeapInit+0xac>)
 800319a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00c      	beq.n	80031c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	3307      	adds	r3, #7
 80031aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0307 	bic.w	r3, r3, #7
 80031b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003238 <prvHeapInit+0xac>)
 80031bc:	4413      	add	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80031c4:	4a1d      	ldr	r2, [pc, #116]	@ (800323c <prvHeapInit+0xb0>)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80031ca:	4b1c      	ldr	r3, [pc, #112]	@ (800323c <prvHeapInit+0xb0>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	4413      	add	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80031d8:	2208      	movs	r2, #8
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0307 	bic.w	r3, r3, #7
 80031e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4a15      	ldr	r2, [pc, #84]	@ (8003240 <prvHeapInit+0xb4>)
 80031ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80031ee:	4b14      	ldr	r3, [pc, #80]	@ (8003240 <prvHeapInit+0xb4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2200      	movs	r2, #0
 80031f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80031f6:	4b12      	ldr	r3, [pc, #72]	@ (8003240 <prvHeapInit+0xb4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	1ad2      	subs	r2, r2, r3
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800320c:	4b0c      	ldr	r3, [pc, #48]	@ (8003240 <prvHeapInit+0xb4>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	4a0a      	ldr	r2, [pc, #40]	@ (8003244 <prvHeapInit+0xb8>)
 800321a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	4a09      	ldr	r2, [pc, #36]	@ (8003248 <prvHeapInit+0xbc>)
 8003222:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003224:	4b09      	ldr	r3, [pc, #36]	@ (800324c <prvHeapInit+0xc0>)
 8003226:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800322a:	601a      	str	r2, [r3, #0]
}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	20000474 	.word	0x20000474
 800323c:	20004074 	.word	0x20004074
 8003240:	2000407c 	.word	0x2000407c
 8003244:	20004084 	.word	0x20004084
 8003248:	20004080 	.word	0x20004080
 800324c:	20004090 	.word	0x20004090

08003250 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003258:	4b28      	ldr	r3, [pc, #160]	@ (80032fc <prvInsertBlockIntoFreeList+0xac>)
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	e002      	b.n	8003264 <prvInsertBlockIntoFreeList+0x14>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	429a      	cmp	r2, r3
 800326c:	d8f7      	bhi.n	800325e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	4413      	add	r3, r2
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	429a      	cmp	r2, r3
 800327e:	d108      	bne.n	8003292 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	441a      	add	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	441a      	add	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d118      	bne.n	80032d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b15      	ldr	r3, [pc, #84]	@ (8003300 <prvInsertBlockIntoFreeList+0xb0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d00d      	beq.n	80032ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	441a      	add	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	e008      	b.n	80032e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80032ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003300 <prvInsertBlockIntoFreeList+0xb0>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	e003      	b.n	80032e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d002      	beq.n	80032ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032ee:	bf00      	nop
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	20004074 	.word	0x20004074
 8003300:	2000407c 	.word	0x2000407c

08003304 <memset>:
 8003304:	4402      	add	r2, r0
 8003306:	4603      	mov	r3, r0
 8003308:	4293      	cmp	r3, r2
 800330a:	d100      	bne.n	800330e <memset+0xa>
 800330c:	4770      	bx	lr
 800330e:	f803 1b01 	strb.w	r1, [r3], #1
 8003312:	e7f9      	b.n	8003308 <memset+0x4>

08003314 <__libc_init_array>:
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	4d0d      	ldr	r5, [pc, #52]	@ (800334c <__libc_init_array+0x38>)
 8003318:	4c0d      	ldr	r4, [pc, #52]	@ (8003350 <__libc_init_array+0x3c>)
 800331a:	1b64      	subs	r4, r4, r5
 800331c:	10a4      	asrs	r4, r4, #2
 800331e:	2600      	movs	r6, #0
 8003320:	42a6      	cmp	r6, r4
 8003322:	d109      	bne.n	8003338 <__libc_init_array+0x24>
 8003324:	4d0b      	ldr	r5, [pc, #44]	@ (8003354 <__libc_init_array+0x40>)
 8003326:	4c0c      	ldr	r4, [pc, #48]	@ (8003358 <__libc_init_array+0x44>)
 8003328:	f000 f818 	bl	800335c <_init>
 800332c:	1b64      	subs	r4, r4, r5
 800332e:	10a4      	asrs	r4, r4, #2
 8003330:	2600      	movs	r6, #0
 8003332:	42a6      	cmp	r6, r4
 8003334:	d105      	bne.n	8003342 <__libc_init_array+0x2e>
 8003336:	bd70      	pop	{r4, r5, r6, pc}
 8003338:	f855 3b04 	ldr.w	r3, [r5], #4
 800333c:	4798      	blx	r3
 800333e:	3601      	adds	r6, #1
 8003340:	e7ee      	b.n	8003320 <__libc_init_array+0xc>
 8003342:	f855 3b04 	ldr.w	r3, [r5], #4
 8003346:	4798      	blx	r3
 8003348:	3601      	adds	r6, #1
 800334a:	e7f2      	b.n	8003332 <__libc_init_array+0x1e>
 800334c:	08003460 	.word	0x08003460
 8003350:	08003460 	.word	0x08003460
 8003354:	08003460 	.word	0x08003460
 8003358:	08003464 	.word	0x08003464

0800335c <_init>:
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	bf00      	nop
 8003360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003362:	bc08      	pop	{r3}
 8003364:	469e      	mov	lr, r3
 8003366:	4770      	bx	lr

08003368 <_fini>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	bf00      	nop
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr
